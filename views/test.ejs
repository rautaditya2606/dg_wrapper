<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Assistant Chat</title>
    <link rel="stylesheet" href="/style.css" />
    <link rel="stylesheet" href="/typewriter.css" />
    <link rel="stylesheet" href="/css/loader.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
    <script src="/js/results-tabs.js" defer></script>
    <style>
      :root {
        --background-dark: #1a1a1a;
        --surface-dark: #2d2d2d;
        --text-light: #e0e0e0;
        --text-dark: #a0a0a0;
        --accent-blue: white;
        --accent-dark: #1976d2;
        --message-user: #343435;
        --message-assistant: #2d2d2d;
      }

      /* Hide scrollbar for Webkit browsers (Chrome, Safari, etc.) */
      .messages-container::-webkit-scrollbar,
      .web-results::-webkit-scrollbar,
      .chat-panel::-webkit-scrollbar {
        display: none;
      }

      /* Hide scrollbar for Firefox */
      .messages-container,
      .web-results,
      .chat-panel {
        scrollbar-width: none;
        -ms-overflow-style: none; /* For Internet Explorer and Edge */
      }

      body {
        background-color: var(--background-dark);
        color: var(--text-light);
        margin: 0;
        padding: 0;
      }

      /* Panel states */
      .web-panel {
        display: none; /* Hide web panel permanently */
        width: 0;
        flex-shrink: 0;
        height: 100%;
        display: flex;
        flex-direction: column;
        background-color: #383638;
        border-left: 1px solid var(--border-color);
        transition: width 0.3s ease;
        overflow: hidden;
        border-radius: 18px 18px 18px 18px;
        margin-right: 24px;
        margin-top: 32px;
        margin-bottom: 32px;
        height: calc(100vh - 119px);
        position: absolute;
        right: 0;
        top: 0;
        z-index: 1;
      }

      /* Panel state when search results exist */
      body.has-search-results .web-panel {
        display: none; /* Keep web panel hidden even when results exist */
        width: 40%;
        overflow-y: auto;
      }

      /* Chat panel state */
      .chat-panel {
        flex: 1;
        min-width: 40%;
        height: 100%;
        overflow-y: auto;
        padding: 20px;
        box-sizing: border-box;
        transition: min-width 0.3s ease, width 0.3s cubic-bezier(0.77,0,0.175,1);
        width: 100%;
        position: relative;
      }

      body.has-search-results .chat-panel {
        width: 60%;
      }

      body.custom-panel-open .chat-panel {
        width: 60%;
      }

      body:not(.custom-panel-open) .chat-panel {
        width: 100%;
        transition: width 0.3s cubic-bezier(0.77,0,0.175,1);
      }

      .custom-panel {
        width: 0;
        transition: width 0.4s cubic-bezier(0.77,0,0.175,1);
        overflow: hidden;
        background: #383638;
        position: relative;
        z-index: 2;
        /* Hide scrollbar for all browsers */
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE 10+ */
        border-radius: 18px 18px 18px 18px;
        margin-right: 24px;
        margin-top: 32px;
        margin-bottom: 32px;
        height: calc(100vh - 119px);
      }
      .custom-panel::-webkit-scrollbar {
        display: none; /* Chrome, Safari, Opera */
      }

      .custom-panel.open {
        width: 40%;
        pointer-events: auto;
      }

      .custom-panel-toggle {
        display: none;
        position: absolute;
        right: 0;
        top: 0;
        transform: none;
        width: 32px;
        height: 48px;
        /* background: var(--surface-dark); */
        border-radius: 0 8px 8px 0;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0,0,0,0.12);
        z-index: 20;
        transition: right 0.3s;
      }
      body.show-panel-toggle .custom-panel-toggle {
        display: flex;
      }

      .custom-panel-toggle i {
        font-size: 1.5rem;
        transition: transform 0.3s, opacity 0.3s;
      }
      .custom-panel-toggle i.fa-xmark {
        transform: rotate(0deg) scale(1.1);
        opacity: 1;
      }
      .custom-panel-toggle i.fa-bars {
        transform: rotate(0deg) scale(1);
        opacity: 1;
      }

      .custom-panel-content {
        padding: 2rem 1.5rem;
        flex: 1;
        overflow-y: auto;
        height: 100%;
        /* Hide scrollbar for all browsers */
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE 10+ */
      }
      .custom-panel-content::-webkit-scrollbar {
        display: none; /* Chrome, Safari, Opera */
      }

      .panel-container {
        display: flex;
        width: 100%;
        height: 100vh;
        position: relative;
        overflow: hidden;
      }

      .results-tabs {
        display: flex;
        gap: 1rem;
        padding: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        background-color: var(--surface-dark);
      }

      .tab {
        padding: 0.5rem 1rem;
        color: var(--text-light);
        background: transparent;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 14px;
      }

      .tab.active {
        background: var(--accent-blue);
        color: white;
      }

      .tab:hover:not(.active) {
        background: rgba(255, 255, 255, 0.1);
      }

      .messages-container {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        overflow-x: hidden;
        scroll-behavior: smooth;
      }

      /* Message styling */
      .message {
        margin-bottom: 16px;
        padding: 12px 16px;
        border-radius: 12px;
        max-width: 85%;
        font-size: 15px;
        line-height: 1.5;
      }

      .message.user {
        background: var(--message-user);
        margin-left: auto;
        color: white;
        border-bottom-right-radius: 4px;
      }

      .message.assistant {
        background: var(--message-assistant);
        margin-right: auto;
        border-bottom-left-radius: 4px;
      }

      /* Natural-looking lists in messages */
      .message ul,
      .message ol {
        margin: 8px 0;
        padding-left: 20px;
      }

      .message li {
        margin: 4px 0;
      }

      .message p {
        margin: 8px 0;
      }

      .message h2,
      .message h3 {
        margin: 16px 0 8px 0;
        font-weight: 600;
      }

      /* Links in messages */
      .message a {
        color: var(--accent-blue);
        text-decoration: none;
      }

      .message a:hover {
        text-decoration: underline;
      }

      .loading {
        display: inline-block;
        margin-left: 10px;
      }

      .loading span {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: var(--accent-blue);
        margin: 0 2px;
        animation: bounce 0.6s infinite alternate;
      }

      .loading span:nth-child(2) {
        animation-delay: 0.2s;
      }
      .loading span:nth-child(3) {
        animation-delay: 0.4s;
      }

      @keyframes bounce {
        to {
          transform: translateY(-4px);
        }
      }

      @keyframes pulse {
        0% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
        100% {
          opacity: 1;
        }
      }

      .message.loading {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .loading-dots {
        display: flex;
        gap: 4px;
      }

      .loading-dots span {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: var(--accent-blue);
        animation: pulse 1s infinite;
      }

      .loading-dots span:nth-child(2) {
        animation-delay: 0.2s;
      }

      .loading-dots span:nth-child(3) {
        animation-delay: 0.4s;
      }

      .web-results {
        flex: 1;
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 2rem;
        overflow-y: auto;
        overflow-x: hidden;
        border-radius: 20px;
        margin-right: 1rem;
      }

      .search-result {
        display: flex;
        gap: 1.5rem;
        padding: 1.5rem;
        border-radius: 12px;
        background: var(--surface-dark);
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
      }

      .search-result:hover {
        transform: translateY(-2px);
        border-color: var(--accent-blue);
      }

      .search-result-image {
        flex-shrink: 0;
        width: 90%;
        max-width: 200px;
        aspect-ratio: 1;
        border-radius: 8px;
        overflow: hidden;
        background: #222;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .search-result-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
      }

      .search-result:hover .search-result-image img {
        transform: scale(1.05);
      }

      .search-result-content {
        flex: 1;
        display: flex;
        flex-direction: column;
      }

      .result-title {
        margin: 0 0 0.75rem 0;
      }

      .result-title a {
        color: var(--accent-blue);
        text-decoration: none;
        font-size: 1.1rem;
        font-weight: 500;
        line-height: 1.4;
      }

      .result-title a:hover {
        text-decoration: underline;
      }

      .result-snippet {
        color: var(--text-dark);
        margin: 0.5rem 0;
        line-height: 1.5;
        font-size: 0.95rem;
      }

      .result-url {
        color: var(--text-dark);
        font-size: 0.85rem;
        margin-top: auto;
        opacity: 0.8;
      }

      .image-results {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 1rem;
        padding: 1.5rem;
        overflow-y: auto;
      }

      .image-result {
        border-radius: 8px;
        overflow: hidden;
        transition: transform 0.3s ease;
        aspect-ratio: 1;
      }

      .image-result:hover {
        transform: scale(1.05);
      }

      .image-result img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
      }

      .structured-web-results {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        margin-bottom: 2rem;
      }
      .search-result.card {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
        gap: 1.25rem;
        padding: 1.25rem;
        border-radius: 12px;
        background: var(--surface-dark);
        border: 1px solid rgba(255,255,255,0.08);
        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        transition: box-shadow 0.2s, border-color 0.2s;
      }
      .search-result.card:hover {
        box-shadow: 0 4px 16px rgba(33,150,243,0.10);
        border-color: var(--accent-blue);
      }
      .search-result-image {
        flex-shrink: 0;
        width: 150px;
        height: 150px;
        border-radius: 8px;
        overflow: hidden;
        background: #222;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .search-result-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
      }
      .search-result-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
      }
      .result-title {
        margin: 0 0 0.5rem 0;
        font-size: 1.1rem;
        font-weight: 600;
      }
      .result-title a {
        color: var(--accent-blue);
        text-decoration: none;
        transition: color 0.2s;
      }
      .result-title a:hover {
        color: var(--accent-dark);
        text-decoration: underline;
      }
      .result-snippet {
        color: var(--text-dark);
        font-size: 0.98rem;
        margin: 0.25rem 0 0 0;
        line-height: 1.5;
      }
      .custom-panel-loader {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        min-height: 180px;
        color: var(--accent-blue);
        font-size: 1.2rem;
        gap: 1.5rem;
      }
      .custom-panel-loader .loader-dots {
        display: flex;
        gap: 8px;
      }
      .custom-panel-loader .loader-dots span {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: var(--accent-blue);
        opacity: 0.7;
        animation: custom-bounce 1s infinite alternate;
      }
      .custom-panel-loader .loader-dots span:nth-child(2) {
        animation-delay: 0.2s;
      }
      .custom-panel-loader .loader-dots span:nth-child(3) {
        animation-delay: 0.4s;
      }
      @keyframes custom-bounce {
        to {
          transform: translateY(-8px);
          opacity: 1;
        }
      }

      /* Animation for custom panel default message */
      @keyframes fadeOpacity {
        0% { opacity: 0.4; }
        25% { opacity: 0.7; }
        50% { opacity: 1; }
        75% { opacity: 0.7; }
        100% { opacity: 0.4; }
      }
      .custom-panel-default-message {
        animation: fadeOpacity 2.5s infinite;
        will-change: opacity;
      }

      /* Animated dots for custom panel placeholder */
      .custom-panel-animated-icon {
        display: flex;
        gap: 0.7rem;
        margin-top: 1.5rem;
      }
      .custom-panel-animated-icon .dot {
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: var(--accent-blue);
        opacity: 0.5;
        animation: bounceDot 1.2s infinite both;
      }
      .custom-panel-animated-icon .dot:nth-child(2) {
        animation-delay: 0.2s;
      }
      .custom-panel-animated-icon .dot:nth-child(3) {
        animation-delay: 0.4s;
      }
      @keyframes bounceDot {
        0%, 100% { transform: translateY(0); opacity: 0.5; }
        30% { transform: translateY(-18px); opacity: 1; }
        60% { transform: translateY(0); opacity: 0.7; }
      }
    </style>
  </head>
  <body>
    <div class="panel-container">
      <!-- Chat Panel -->
      <div class="chat-panel">
        <div class="panel-header">
          <h2>Chat Assistant</h2>
        </div>
        <div class="messages-container">
          <div id="chatPanelPlaceholder" style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; min-height: 220px;">
            <div class="welcome-circle"></div>
            <h1 style="margin-bottom: 0.5rem; font-size: 2rem;">Search Analysis</h1>
            <p style="color: #888; text-align: center; max-width: 320px; margin-bottom: 1.5rem;">Start a conversation or search to see messages here.</p>
            <div class="pulse-circles">
              <div class="pulse-circle"></div>
              <div class="pulse-circle"></div>
              <div class="pulse-circle"></div>
            </div>
          </div>
          <div id="loadingMessage" class="loading-message"></div>
          <% if (results && results.length > 0) { %>
            <% results.forEach((result) => { %>
              <div class="message <%= result.role %>"><%= result.content %></div>
            <% }); %>
          <% } %>
        </div>
        <form id="chatForm" class="chat-form">
          <div class="input-group">
            <input
              type="text"
              id="queryInput"
              placeholder="Type your message..."
              required
            />
            <button type="submit"><i class="fa-solid fa-paper-plane"></i></button>
          </div>
        </form>
        <!-- Toggle icon always visible on right edge of chat-panel -->
        <div class="custom-panel-toggle" id="customPanelToggle" title="Toggle panel">
          <i class="fa-solid fa-bars" id="customPanelToggleIcon" aria-label="Open panel"></i>
        </div>
      </div>

      <!-- Web Results Panel -->
      <div class="web-panel">
        <div id="web-results" class="web-results">
          <div class="panel-header">
            <h2>Search Results</h2>
          </div>
        </div>
      </div>

      <!-- Custom Independent Panel -->
      <div class="custom-panel" id="customPanel">
        <div class="custom-panel-content">
          <!-- Animated placeholder shown until first query -->
          <div id="customPanelPlaceholder" style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; min-height: 220px;">
            <div class="custom-panel-animated-icon">
              <span class="dot"></span>
              <span class="dot"></span>
              <span class="dot"></span>
            </div>
            <div style="margin-top: 2rem; color: var(--text-dark); font-size: 1.13rem; text-align: center; max-width: 320px;">
              Start a conversation or search to see web results here.
            </div>
          </div>
          <div id="mockTerminalContainer" class="mock-terminal-container" style="display: none; margin-bottom: 1.5rem;">
            <div class="mock-terminal-window">
              <pre class="mock-terminal-shell-content" id="mockTerminalContent">
<span class="prompt">user@websearch:<span class="tilde">~</span> <span class="dollar">$</span></span> <span class="shell-cmd">Processing: <b>${query.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</b></span>
              </pre>
            </div>
            <div class="terminal-footer">
              <span class="mock-terminal-checklist" id="mockTerminalFooter">Fetching results...</span>
            </div>
          </div>
          <div id="customPanelBody" class="custom-panel-default-message" style="color: var(--text-dark); font-size: 1.08rem; text-align: center; margin-top: 2.5rem; display: none;">
            <i class="fa-solid fa-magnifying-glass" style="font-size: 2.2rem; color: var(--accent-blue); margin-bottom: 1rem;"></i>
            <div style="margin-top: 1rem;">Web search results will be displayed here.</div>
          </div>
          <div id="customPanelResults"></div>
        </div>
      </div>
    </div>
    <!-- End of panel-container -->

    <script>
      // Typewriter effect function (top-level, reusable)
      function typewriterEffect(element, speed = 8) { // Faster speed
        console.log('Typewriter effect called for:', element);
        const html = element.innerHTML;
        element.innerHTML = '';
        let i = 0;
        function type() {
          if (i < html.length) {
            // Handle HTML tags: print whole tag at once
            if (html[i] === '<') {
              const close = html.indexOf('>', i);
              if (close !== -1) {
                element.innerHTML += html.slice(i, close + 1);
                i = close + 1;
              } else {
                element.innerHTML += html[i++];
              }
            } else {
              element.innerHTML += html[i++];
            }
            setTimeout(type, speed);
          }
        }
        type();
        element.classList.add('typewriter-done');
      }

      // Simple markdown parser for the client side
      function parseMarkdown(text) {
        // First, normalize line endings and remove excess whitespace
        text = text
          .replace(/\r\n/g, "\n")
          .replace(/\n{3,}/g, "\n\n")
          .trim();

        return (
          text
            // Headers with proper spacing
            .replace(/^## (.*$)/gm, "<h2>$1</h2>\n")
            .replace(/^### (.*$)/gm, "<h3>$1</h3>\n")
            // Bold
            .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
            // Italic
            .replace(/\*(.*?)\*/g, "<em>$1</em>")
            // Bullet lists with proper spacing
            .replace(/^\s*[\-\*]\s(.+)/gm, "<li>$1</li>")
            .replace(/(<li>.*<\/li>\n?)+/g, "<ul>$&</ul>\n")
            // Numbered lists with proper spacing
            .replace(/^\d+\.\s(.+)/gm, "<li>$1</li>")
            .replace(/(<li>.*<\/li>\n?)+/g, "<ol>$&</ol>\n")
            // Paragraphs with proper spacing
            .replace(/\n\n/g, "</p><p>")
            // Preserve line breaks within paragraphs
            .replace(/\n/g, "<br>")
            // Ensure content is wrapped in a paragraph
            .replace(/^(.+?)(?=<\/p>|$)/, "<p>$1")
            .replace(/(?<=<\/p>)(.+?)$/, "<p>$1</p>")
        );
      }

      // Renders structured web and image results for the custom panel
      function renderStructuredWebResults(results) {
        // This function is now only used to render the web search cards (not images)
        let html = '';
        if (results.organic_results && results.organic_results.length > 0) {
          html += '<div class="structured-web-results">';
          results.organic_results.forEach((result, index) => {
            let imageHtml = '';
            const imageResult = results.image_results && results.image_results[index];
            if (imageResult) {
              const imageSrc = imageResult.src?.thumbnail || imageResult.src?.medium || imageResult.src?.original || imageResult.thumbnail || imageResult.image || imageResult.src || '';
              if (imageSrc) {
                imageHtml = `<div class='search-result-image'><img src='${imageSrc}' alt='Result image' style='width: 100%; height: 120px; object-fit: cover; border-radius: 8px;'></div>`;
              }
            }
            const validLink = result.link && result.link.startsWith('http') ? result.link : '#';
            html += `
              <div class="search-result card" style="opacity:0;">
                ${imageHtml}
                <div class="search-result-content">
                  <h3 class="result-title">
                    <a href="${validLink}" target="_blank" rel="noopener noreferrer">
                      ${result.title || 'No title'}
                    </a>
                  </h3>
                  <p class="result-snippet">${result.snippet || result.body || 'No description available'}</p>
                  <div class="result-url" style="font-size: 0.8rem; color: var(--text-dark); margin-top: 0.5rem;">
                    ${result.link || 'No URL'}
                  </div>
                </div>
              </div>
        `;
          });
          html += '</div>';
        }
        if (!html) {
          html = '<p>No web results found</p>';
        }
        return html;
      }

      // Helper: Render images in groups of 2, one group at a time, covering full width
      async function showGroupedImagesFullWidth(imageResults, container, groupSize = 2, delay = 900) {
        container.innerHTML = '';
        if (!imageResults || imageResults.length === 0) return;
        let groupIndex = 0;
        const groupDiv = document.createElement('div');
        groupDiv.style.width = '100%';
        groupDiv.style.display = 'flex';
        groupDiv.style.justifyContent = 'center';
        groupDiv.style.alignItems = 'center';
        groupDiv.style.gap = '24px';
        groupDiv.style.transition = 'opacity 0.4s';
        container.appendChild(groupDiv);
        while (groupIndex * groupSize < imageResults.length) {
          groupDiv.innerHTML = '';
          const group = imageResults.slice(groupIndex * groupSize, (groupIndex + 1) * groupSize);
          group.forEach((img) => {
            const imageSrc = img.src?.thumbnail || img.src?.medium || img.src?.original || img.thumbnail || img.image || img.src || '';
            const imageCard = document.createElement('div');
            imageCard.className = 'image-result';
            imageCard.style.flex = '1 1 0';
            imageCard.style.maxWidth = '48%';
            imageCard.style.margin = '0';
            imageCard.innerHTML = `
              <a href="${img.href || img.link || '#'}" target="_blank" rel="noopener noreferrer">
                <img src="${imageSrc}" alt="Image result" style="width:100%;height:260px;object-fit:cover;display:block;border-radius:12px;" />
              </a>
            `;
            groupDiv.appendChild(imageCard);
          });
          groupDiv.style.opacity = '1';
          await new Promise(res => setTimeout(res, delay));
          groupIndex++;
        }
        // Fade out after last group
        groupDiv.style.opacity = '1';
        await new Promise(res => setTimeout(res, 400));
        groupDiv.style.opacity = '0';
        await new Promise(res => setTimeout(res, 400));
        container.innerHTML = '';
      }

      document.addEventListener("DOMContentLoaded", () => {
        const chatForm = document.getElementById("chatForm");
        const queryInput = document.getElementById("queryInput");
        const messagesContainer = document.querySelector(".messages-container");
        const webResults = document.getElementById("web-results");
        const imageResults = document.getElementById("image-results");
        const webPanel = document.querySelector(".web-panel");
        const customPanel = document.getElementById("customPanel");
        const customPanelToggle = document.getElementById("customPanelToggle");
        const customPanelToggleIcon = document.getElementById("customPanelToggleIcon");
        const customPanelBody = document.getElementById("customPanelBody");
        const customPanelPlaceholder = document.getElementById("customPanelPlaceholder");
        const chatPanelPlaceholder = document.getElementById("chatPanelPlaceholder");

        // Apply typewriter effect to all assistant messages on load (if not already animated)
        document.querySelectorAll('.message.assistant').forEach(msg => {
          if (!msg.classList.contains('typewriter-done')) {
            console.log('Applying typewriter to:', msg);
            typewriterEffect(msg);
          }
        });

        chatForm.addEventListener("submit", async (e) => {
          e.preventDefault();

          // Disable form while processing
          queryInput.disabled = true;
          const submitButton = chatForm.querySelector('button[type="submit"]');
          submitButton.disabled = true;

          // Hide chat panel placeholder immediately on first query
          if (chatPanelPlaceholder && chatPanelPlaceholder.style.display !== 'none') {
            chatPanelPlaceholder.style.display = 'none';
          }
          // Hide custom panel placeholder and body
          if (customPanelPlaceholder && customPanelPlaceholder.style.display !== 'none') {
            customPanelPlaceholder.style.display = 'none';
          }
          if (customPanelBody && customPanelBody.style.display !== 'none') {
            customPanelBody.style.display = 'none';
          }

          const query = queryInput.value.trim();
          if (!query) {
            // Re-enable form if query is empty
            queryInput.disabled = false;
            submitButton.disabled = false;
            return;
          }

          // Show "Searching on web..." in web panel for all queries
          webResults.innerHTML = `
            <div class="panel-header">
              <h2>Web Search Results</h2>
            </div>
            <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 200px; color: var(--text-dark);">
              <div class="custom-panel-animated-icon">
                <span class="dot"></span>
                <span class="dot"></span>
                <span class="dot"></span>
              </div>
              <div style="margin-top: 1rem; font-size: 1.1rem;">Searching on web...</div>
            </div>
          `;
          // document.body.classList.add("has-search-results"); // Removed - web panel is hidden

          // Show mock terminal for any query
          const mockTerminal = document.getElementById('mockTerminalContainer');
          const mockTerminalContent = document.getElementById('mockTerminalContent');
          const mockTerminalFooter = document.getElementById('mockTerminalFooter');
          if (mockTerminal) {
            mockTerminal.style.display = '';
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML = '';
              // Show the process steps in the mock terminal as they happen
              const steps = [
                'Validating input...',
                'Checking if web search is needed...',
                'Calling LLM for decision...',
                'Performing web search (if needed)...',
                'Performing image search (if needed)...',
                'Generating LLM response...',
                'Sending response to user...'
              ];
              // Show the first step immediately
              mockTerminalContent.innerHTML += `<span class="prompt">user@websearch:<span class="tilde">~</span> <span class="dollar">$</span></span> <span class="shell-cmd">${steps[0]}</span>\n`;
            }
            if (mockTerminalFooter) {
              mockTerminalFooter.textContent = 'Processing...';
            }
          }

          // Add user message
          const userMessage = document.createElement("div");
          userMessage.className = "message user";
          userMessage.textContent = query;
          messagesContainer.appendChild(userMessage);

          // Create and insert loading message right after user message
          const loadingMessage = document.createElement("div");
          loadingMessage.className = "loading-message";
          userMessage.insertAdjacentElement('afterend', loadingMessage);

          // Clear input
          queryInput.value = "";

          // Always open the custom panel on any query
          customPanel.classList.add("open");
          document.body.classList.add("custom-panel-open");
          document.body.classList.add("show-panel-toggle");

          // Show loading message based on query type
          loadingMessage.style.display = "block";
          loadingMessage.textContent = "Answering...";

          try {
            // Step 2: Checking if web search is needed
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Checking if web search is needed...</span>\n`;
            }
            // Step 3: Calling Claude for decision
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Calling LLM for decision...</span>\n`;
            }
            const response = await fetch("/test/search", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ query }),
            });

            // Step 4: Performing web search
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Performing web search (if needed)...</span>\n`;
            }
            // Step 5: Performing image search
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Performing image search (if needed)...</span>\n`;
            }

            const data = await response.json();

            // Set loading message based on query type
            if (typeof data.isConversational !== 'undefined') {
              if (data.isConversational) {
                loadingMessage.textContent = 'Answering...';
              } else {
                loadingMessage.textContent = 'Searching on web...';
              }
            }

            // Step 6: Generating LLM response
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Generating LLM response...</span>\n`;
            }
            // Step 7: Sending response to user
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Sending response to user...</span>\n`;
            }
            if (mockTerminalFooter) {
              mockTerminalFooter.textContent = 'Results loaded.';
            }
            
            // DEBUG: Log the full response
            console.log('TEST SEARCH RESPONSE:', data);
            console.log('🔍 DEBUG - imageResults[0]:', data.imageResults?.[0]);
            console.log('🔍 DEBUG - imageResults[0].src:', data.imageResults?.[0]?.src);
            console.log('🔍 DEBUG - imageResults[0].src keys:', data.imageResults?.[0]?.src ? Object.keys(data.imageResults[0].src) : 'no src');

            // Show web results in custom panel if present
            if (data.webResults && data.webResults.length > 0) {
              // Update terminal to show success
              if (mockTerminal && mockTerminalFooter) {
                mockTerminalFooter.textContent = 'Results loaded.';
              }
              // Wait a moment, then hide the terminal
              await new Promise(res => setTimeout(res, 700));
              if (mockTerminal) mockTerminal.style.display = 'none';
              // 1. Show grouped images full width, one group at a time
              if (data.imageResults && data.imageResults.length > 0) {
                await showGroupedImagesFullWidth(data.imageResults, customPanelResults, 2, 900);
              }
              // 2. After all images are shown, show web search cards with slide-in animation
              const webCardsHtml = renderStructuredWebResults({
                organic_results: data.webResults.map((result, idx) => {
                  // Get corresponding image result
                  const imageResult = data.imageResults && data.imageResults[idx];
                  let imageUrl = null;
                  if (imageResult) {
                    imageUrl = imageResult.src?.thumbnail || imageResult.src?.medium || imageResult.src?.original || imageResult.thumbnail || imageResult.image || null;
                  }
                  return {
                    title: result.title,
                    link: result.href,
                    snippet: result.body,
                    image: imageUrl
                  };
                }),
                image_results: data.imageResults || []
              });
              // Insert web cards (hidden initially)
              const tempDiv = document.createElement('div');
              tempDiv.innerHTML = webCardsHtml;
              const cards = tempDiv.querySelectorAll('.search-result.card');
              // Append to DOM (still hidden)
              tempDiv.childNodes.forEach(node => customPanelResults.appendChild(node));
              // Animate cards in sequence
              cards.forEach((card, i) => {
                setTimeout(() => {
                  card.classList.add('slide-in-right');
                  card.style.opacity = '';
                }, i * 180);
              });
            } else if (data.imageResults && data.imageResults.length > 0) {
              // Only images, no web results
              await new Promise(res => setTimeout(res, 700));
              if (mockTerminal) mockTerminal.style.display = 'none';
              await showGroupedImagesFullWidth(data.imageResults, customPanelResults, 2, 900);
            } else if (data.webResults && data.webResults.length > 0) {
              // Fallback: if no LLM response but we have web results
              const assistantMessage = document.createElement("div");
              assistantMessage.className = "message assistant";
              assistantMessage.textContent = `I found ${data.webResults.length} web results for your query. You can view them in the panel on the right.`;
              messagesContainer.appendChild(assistantMessage);
            } else if (!data.isConversational) {
              // No results found and not conversational
              const assistantMessage = document.createElement("div");
              assistantMessage.className = "message assistant";
              assistantMessage.textContent = "I couldn't find any relevant information for your query. Please try rephrasing your question.";
              messagesContainer.appendChild(assistantMessage);
            }

            // Remove loading message from DOM
            loadingMessage.remove();

            // Handle web panel visibility based on response type
            if (data.isConversational) {
              // document.body.classList.remove("has-search-results"); // Removed - web panel is hidden
              // Add a simple response for conversational queries
              const assistantMessage = document.createElement("div");
              assistantMessage.className = "message assistant";
              assistantMessage.textContent = data.message || "This appears to be a conversational query. Please use the main chat interface for better assistance.";
              messagesContainer.appendChild(assistantMessage);
              // Typewriter effect for conversational assistant message
              console.log('Applying typewriter to conversational assistant message:', assistantMessage);
              typewriterEffect(assistantMessage);
            } else {
              // For web search results, display the LLM response in chat panel
              if (data.llmResponse) {
                const assistantMessage = document.createElement("div");
                assistantMessage.className = "message assistant";
                // Parse markdown and set innerHTML for better formatting
                assistantMessage.innerHTML = parseMarkdown(data.llmResponse);
                assistantMessage.classList.add('typewriter-effect');
                messagesContainer.appendChild(assistantMessage);
                // Typewriter effect for assistant message
                console.log('Applying typewriter to new assistant message:', assistantMessage);
                typewriterEffect(assistantMessage);
              } else if (data.webResults && data.webResults.length > 0) {
                // Fallback: if no LLM response but we have web results
                const assistantMessage = document.createElement("div");
                assistantMessage.className = "message assistant";
                assistantMessage.textContent = `I found ${data.webResults.length} web results for your query. You can view them in the panel on the right.`;
                messagesContainer.appendChild(assistantMessage);
              } else if (!data.isConversational) {
                // No results found and not conversational
                const assistantMessage = document.createElement("div");
                assistantMessage.className = "message assistant";
                assistantMessage.textContent = "I couldn't find any relevant information for your query. Please try rephrasing your question.";
                messagesContainer.appendChild(assistantMessage);
              }
            }

            // Scroll chat to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;

            // On first query, hide placeholder and show results message
            if (customPanelPlaceholder && customPanelPlaceholder.style.display !== 'none') {
              customPanelPlaceholder.style.display = 'none';
              customPanelBody.style.display = '';
            }

            // Hide chat panel placeholder on first query
            if (chatPanelPlaceholder && chatPanelPlaceholder.style.display !== 'none') {
              chatPanelPlaceholder.style.display = 'none';
            }

            // Re-enable form after successful response
            queryInput.disabled = false;
            submitButton.disabled = false;
          } catch (error) {
            // On error, append error to mock terminal
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\" style=\"color:red\">Error: ${error.message}</span>\n`;
            }
            if (mockTerminalFooter) {
              mockTerminalFooter.textContent = 'Error occurred.';
            }
            console.error("Error:", error);
            const errorMessage = document.createElement("div");
            errorMessage.className = "message assistant error";
            errorMessage.textContent =
              "Sorry, there was an error processing your request.";
            messagesContainer.appendChild(errorMessage);
            document.body.classList.remove("has-search-results");

            // Re-enable form after error
            queryInput.disabled = false;
            submitButton.disabled = false;
          }
        });

        function updateSearchResults(results) {
          console.log('🔍 DEBUG - updateSearchResults called with:', results);
          console.log('🔍 DEBUG - results.results length:', results.results?.length);
          console.log('🔍 DEBUG - results.imageResults length:', results.imageResults?.length);
          console.log('🔍 DEBUG - results.imageResults:', results.imageResults);
          
          // Always show the web panel after a search
          document.body.classList.add('search-active');
          // Clear previous results
          webResults.innerHTML = '';

          // Always show the header
          const header = document.createElement('div');
          header.className = 'panel-header';
          header.innerHTML = '<h2>Web Search Results</h2>';
          webResults.appendChild(header);

          // Show web results if present
          if (results.results?.length > 0) {
            const resultsList = document.createElement('div');
            resultsList.className = 'search-results-list';
            results.results.forEach((result, index) => {
              console.log(`🔍 DEBUG - Processing result ${index}:`, result);
              console.log(`🔍 DEBUG - Checking imageResults[${index}]:`, results.imageResults?.[index]);
              
              const resultDiv = document.createElement('div');
              resultDiv.className = 'search-result card';
              
              // Add image if available from imageResults
              let imageHtml = '';
              if (results.imageResults && results.imageResults[index]) {
                const imageResult = results.imageResults[index];
                const imageSrc = imageResult.src?.thumbnail || imageResult.src?.medium || imageResult.src?.original || imageResult.thumbnail || imageResult.image || '';
                if (imageSrc) {
                  console.log(`🔍 DEBUG - Using image for result ${index}:`, imageSrc);
                  imageHtml = `<div class="search-result-image"><img src="${imageSrc}" alt="Result image" style="width: 100%; height: 120px; object-fit: cover; border-radius: 8px;"></div>`;
                } else if (result.href) {
                  console.log(`🔍 DEBUG - Using favicon for result ${index}`);
                  try {
                    const url = new URL(result.href);
                    const domain = url.hostname;
                    const favicon = `https://www.google.com/s2/favicons?domain=${domain}&sz=64`;
                    imageHtml = `<div class="search-result-image"><img src="${favicon}" alt="Favicon" style="width: 32px; height: 32px; object-fit: contain;"></div>`;
                  } catch (e) {
                    // fallback: no image
                  }
                }
              } else if (result.href) {
                console.log(`🔍 DEBUG - Using favicon for result ${index}`);
                try {
                  const url = new URL(result.href);
                  const domain = url.hostname;
                  const favicon = `https://www.google.com/s2/favicons?domain=${domain}&sz=64`;
                  imageHtml = `<div class="search-result-image"><img src="${favicon}" alt="Favicon" style="width: 32px; height: 32px; object-fit: contain;"></div>`;
                } catch (e) {
                  // fallback: no image
                }
              }
              
              const resultContent = `
                <div class="search-result-content">
                  <div class="result-title">
                    <a href="${result.href}" target="_blank" rel="noopener noreferrer">${result.title}</a>
                  </div>
                  <div class="result-snippet">${result.body}</div>
                  <div class="result-url">${result.href}</div>
                </div>
              `;

              resultDiv.innerHTML = `
                  ${imageHtml}
                ${resultContent}
              `;

              resultsList.appendChild(resultDiv);
            });

            webResults.appendChild(resultsList);
            }
          }

        // Add toggle logic for custom panel
        if (customPanelToggle) {
          customPanelToggle.addEventListener('click', () => {
            const isOpen = customPanel.classList.toggle('open');
            document.body.classList.toggle('custom-panel-open', isOpen);
            // Optionally, change the icon
            if (customPanelToggleIcon) {
              if (isOpen) {
                customPanelToggleIcon.classList.remove('fa-bars');
                customPanelToggleIcon.classList.add('fa-xmark');
                customPanelToggleIcon.setAttribute('aria-label', 'Close panel');
              } else {
                customPanelToggleIcon.classList.remove('fa-xmark');
                customPanelToggleIcon.classList.add('fa-bars');
                customPanelToggleIcon.setAttribute('aria-label', 'Open panel');
              }
            }
          });
        }
      });
    </script>
  </body>
</html>