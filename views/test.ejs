<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Assistant Chat</title>
    <link rel="stylesheet" href="/style.css" />
    <link rel="stylesheet" href="/typewriter.css" />
    <link rel="stylesheet" href="/css/loader.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
    <script src="/js/results-tabs.js" defer></script>
    <style>
      :root {
        --background-dark: #1a1a1a;
        --surface-dark: #2d2d2d;
        --text-light: #e0e0e0;
        --text-dark: #a0a0a0;
        --accent-blue: white;
        --accent-dark: #1976d2;
        --message-user: #343435;
        --message-assistant: #2d2d2d;
        --border-color: #444;
        --accent-green: #4caf50;
      }

      /* Hide scrollbar for Webkit browsers (Chrome, Safari, etc.) */
      .messages-container::-webkit-scrollbar,
      .web-results::-webkit-scrollbar,
      .chat-panel::-webkit-scrollbar {
        display: none;
      }

      /* Hide scrollbar for Firefox */
      .messages-container,
      .web-results,
      .chat-panel {
        scrollbar-width: none;
        -ms-overflow-style: none; /* For Internet Explorer and Edge */
      }

      body {
        background-color: var(--background-dark);
        color: var(--text-light);
        margin: 0;
        padding: 0;
      }

      /* Panel states */
      .web-panel {
        display: none; /* Hide web panel permanently */
        width: 0;
        flex-shrink: 0;
        height: 100%;
        display: flex;
        flex-direction: column;
        background-color: #383638;
        border-left: 1px solid var(--border-color);
        transition: width 0.3s ease;
        overflow: hidden;
        border-radius: 18px 18px 18px 18px;
        margin-right: 24px;
        margin-top: 32px;
        margin-bottom: 32px;
        height: calc(100vh - 119px);
        position: absolute;
        right: 0;
        top: 0;
        z-index: 1;
      }

      /* Panel state when search results exist */
      body.has-search-results .web-panel {
        display: none; /* Keep web panel hidden even when results exist */
        width: 40%;
        overflow-y: auto;
      }

      /* Chat panel state */
      .chat-panel {
        flex: 1;
        min-width: 40%;
        height: 100%;
        overflow-y: auto;
        padding: 20px;
        box-sizing: border-box;
        transition: min-width 0.3s ease, width 0.3s cubic-bezier(0.77,0,0.175,1);
        width: 100%;
        position: relative;
      }

      body.has-search-results .chat-panel {
        width: 60%;
      }

      body.custom-panel-open .chat-panel {
        width: 60%;
      }

      body:not(.custom-panel-open) .chat-panel {
        width: 100%;
        transition: width 0.3s cubic-bezier(0.77,0,0.175,1);
      }

      .custom-panel {
        width: 0;
        transition: width 0.4s cubic-bezier(0.77,0,0.175,1);
        overflow: hidden;
        background: #383638;
        position: relative;
        z-index: 2;
        /* Hide scrollbar for all browsers */
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE 10+ */
        border-radius: 18px 18px 18px 18px;
        margin-right: 24px;
        margin-top: 32px;
        margin-bottom: 32px;
        height: calc(100vh - 119px);
      }
      .custom-panel::-webkit-scrollbar {
        display: none; /* Chrome, Safari, Opera */
      }

      .custom-panel.open {
        width: 40%;
        pointer-events: auto;
      }

      .custom-panel-toggle {
        display: none;
        position: fixed;
        right: 24px;
        top: 24px;
        width: 32px;
        height: 48px;
        border-radius: 0 8px 8px 0;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0,0,0,0.12);
        z-index: 1000;
        transition: none;
      }
      body.show-panel-toggle .custom-panel-toggle {
        display: flex;
      }

      .custom-panel-toggle i {
        font-size: 1.5rem;
        transition: transform 0.3s, opacity 0.3s;
      }
      .custom-panel-toggle i.fa-xmark {
        transform: rotate(0deg) scale(1.1);
        opacity: 1;
      }
      .custom-panel-toggle i.fa-bars {
        transform: rotate(0deg) scale(1);
        opacity: 1;
      }

      .custom-panel-content {
        padding: 2rem 1.5rem;
        padding-bottom: 120px; /* Add bottom padding to prevent content from being hidden behind progress bar */
        flex: 1;
        overflow-y: auto;
        height: 100%;
        /* Hide scrollbar for all browsers */
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE 10+ */
      }
      .custom-panel-content::-webkit-scrollbar {
        display: none; /* Chrome, Safari, Opera */
      }

      .panel-container {
        display: flex;
        width: 100%;
        height: 100vh;
        position: relative;
        overflow: hidden;
      }

      .results-tabs {
        display: flex;
        gap: 1rem;
        padding: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        background-color: var(--surface-dark);
      }

      .tab {
        padding: 0.5rem 1rem;
        color: var(--text-light);
        background: transparent;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 14px;
      }

      .tab.active {
        border: 1px solid #fff;
        color: white;
        background: transparent;
      }

      .tab:hover:not(.active) {
        background: rgba(255, 255, 255, 0.1);
      }

      .messages-container {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        overflow-x: hidden;
        scroll-behavior: smooth;
      }

      /* Message styling */
      .message {
        margin-bottom: 16px;
        padding: 12px 16px;
        border-radius: 12px;
        max-width: 85%;
        font-size: 15px;
        line-height: 1.5;
        word-wrap: break-word;
        overflow-wrap: break-word;
      }
      
      /* Analysis styling within messages */
      .message .message-analysis {
        max-width: 100%;
        overflow-x: auto;
      }
      
      .message .message-analysis * {
        max-width: 100%;
        box-sizing: border-box;
      }
      
      .message .task-item {
        word-break: break-word;
      }

      .message.user {
        background: var(--message-user);
        margin-left: auto;
        color: white;
        border-bottom-right-radius: 4px;
      }

      .message.assistant {
        background: var(--message-assistant);
        margin-right: auto;
        border-bottom-left-radius: 4px;
      }

      /* Natural-looking lists in messages */
      .message ul,
      .message ol {
        margin: 8px 0;
        padding-left: 20px;
      }

      .message li {
        margin: 4px 0;
      }

      .message p {
        margin: 8px 0;
      }

      .message h2,
      .message h3 {
        margin: 16px 0 8px 0;
        font-weight: 600;
      }

      /* Links in messages */
      .message a {
        color: var(--accent-blue);
        text-decoration: none;
      }

      .message a:hover {
        text-decoration: underline;
      }

      .loading {
        display: inline-block;
        margin-left: 10px;
      }

      .loading span {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: var(--accent-blue);
        margin: 0 2px;
        animation: bounce 0.6s infinite alternate;
      }

      .loading span:nth-child(2) {
        animation-delay: 0.2s;
      }
      .loading span:nth-child(3) {
        animation-delay: 0.4s;
      }

      @keyframes bounce {
        to {
          transform: translateY(-4px);
        }
      }

      @keyframes pulse {
        0% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
        100% {
          opacity: 1;
        }
      }

      .message.loading {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .loading-dots {
        display: flex;
        gap: 4px;
      }

      .loading-dots span {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: var(--accent-blue);
        animation: pulse 1s infinite;
      }

      .loading-dots span:nth-child(2) {
        animation-delay: 0.2s;
      }

      .loading-dots span:nth-child(3) {
        animation-delay: 0.4s;
      }

      .web-results {
        flex: 1;
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 2rem;
        overflow-y: auto;
        overflow-x: hidden;
        border-radius: 20px;
        margin-right: 1rem;
      }

      .search-result {
        display: flex;
        gap: 1.5rem;
        padding: 1.5rem;
        border-radius: 12px;
        background: var(--surface-dark);
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
      }

      .search-result:hover {
        transform: translateY(-2px);
        border-color: var(--accent-blue);
      }

      .search-result-image {
        flex-shrink: 0;
        width: 90%;
        max-width: 200px;
        aspect-ratio: 1;
        border-radius: 8px;
        overflow: hidden;
        background: #222;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .search-result-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
      }

      .search-result:hover .search-result-image img {
        transform: scale(1.05);
      }

      .search-result-content {
        flex: 1;
        display: flex;
        flex-direction: column;
      }

      .result-title {
        margin: 0 0 0.75rem 0;
      }

      .result-title a {
        color: var(--accent-blue);
        text-decoration: none;
        font-size: 1.1rem;
        font-weight: 500;
        line-height: 1.4;
      }

      .result-title a:hover {
        text-decoration: underline;
      }

      .result-snippet {
        color: var(--text-dark);
        margin: 0.5rem 0;
        line-height: 1.5;
        font-size: 0.95rem;
      }

      .result-url {
        color: var(--text-dark);
        font-size: 0.85rem;
        margin-top: auto;
        opacity: 0.8;
      }

      .image-results {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 1rem;
        padding: 1.5rem;
        overflow-y: auto;
      }

      .image-result {
        border-radius: 8px;
        overflow: hidden;
        transition: transform 0.3s ease;
        aspect-ratio: 1;
      }

      .image-result:hover {
        transform: scale(1.05);
      }

      .image-result img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
      }

      .structured-web-results {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        margin-bottom: 2rem;
      }
      .search-result.card {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
        gap: 1.25rem;
        padding: 1.25rem;
        border-radius: 12px;
        background: var(--surface-dark);
        border: 1px solid rgba(255,255,255,0.08);
        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        transition: box-shadow 0.2s, border-color 0.2s;
      }
      .search-result.card:hover {
        box-shadow: 0 4px 16px rgba(33,150,243,0.10);
        border-color: var(--accent-blue);
      }
      .search-result-image {
        flex-shrink: 0;
        width: 150px;
        height: 150px;
        border-radius: 8px;
        overflow: hidden;
        background: #222;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .search-result-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
      }
      .search-result-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
      }

      /* Analysis Response Styling */
      .analysis-container {
        padding: 1rem 0;
      }

      .analysis-summary {
        background: none;
        color: white;
        padding: 1.5rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
        box-shadow: none;
      }

      .analysis-summary h3 {
        margin: 0 0 1rem 0;
        font-size: 1.2rem;
        font-weight: 600;
      }

      .analysis-summary p {
        margin: 0;
        line-height: 1.6;
        font-size: 1rem;
      }

      .key-points {
        background: rgba(255, 255, 255, 0.1);
        padding: 1rem;
        border-radius: 8px;
        margin-top: 1rem;
      }

      .key-points h4 {
        margin: 0 0 0.75rem 0;
        font-size: 1rem;
        font-weight: 600;
      }

      .key-points ul {
        margin: 0;
        padding-left: 1.25rem;
      }

      .key-points li {
        margin: 0.5rem 0;
        line-height: 1.5;
      }

      .tasks-section {
        margin: 1.5rem 0;
      }

      .tasks-section h3 {
        color: #fff;
        margin: 0 0 1rem 0;
        font-size: 1.2rem;
        font-weight: 600;
      }

      .task-card {
        background: var(--surface-dark);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 1.25rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }

      .task-card:hover {
        border-color: var(--accent-blue);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      }

      .task-header {
        display: flex;
        justify-content: between;
        align-items: flex-start;
        margin-bottom: 0.75rem;
      }

      .task-title {
        color: #fff;
        font-weight: 600;
        font-size: 1.1rem;
        margin: 0;
        flex: 1;
      }

      .task-priority {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      .task-priority.high {
        background: linear-gradient(135deg, #ff6b6b, #ee5a52);
        color: white;
      }

      .task-priority.medium {
        background: linear-gradient(135deg, #feca57, #ff9ff3);
        color: #2c3e50;
      }

      .task-priority.low {
        background: linear-gradient(135deg, #48dbfb, #0abde3);
        color: white;
      }

      .task-description {
        color: var(--text-dark);
        line-height: 1.6;
        margin-bottom: 1rem;
      }

      .task-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
      }

      .task-time {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--text-dark);
        font-size: 0.9rem;
      }

      .task-time i {
        color: var(--accent-blue);
      }

      .task-resources {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
      }

      .task-resource {
        background: rgba(255, 255, 255, 0.1);
        color: var(--text-light);
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        border: 1px solid rgba(255, 255, 255, 0.2);
      }

      .task-status {
        position: absolute;
        top: 1rem;
        right: 1rem;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: #ffa726;
        border: 2px solid rgba(255, 255, 255, 0.2);
      }

      .task-status.completed {
        background: #66bb6a;
      }

      .task-status.in-progress {
        background: #42a5f5;
      }

      .recommendations-section {
        margin: 1.5rem 0;
      }

      .recommendations-section h3 {
        color: #fff;
        margin: 0 0 1rem 0;
        font-size: 1.2rem;
        font-weight: 600;
      }

      .recommendation-item {
        background: rgba(255, 255, 255, 0.05);
        border-left: 4px solid var(--accent-blue);
        padding: 1rem;
        margin-bottom: 0.75rem;
        border-radius: 0 8px 8px 0;
        transition: all 0.3s ease;
      }

      .recommendation-item:hover {
        background: rgba(255, 255, 255, 0.08);
        transform: translateX(4px);
      }

      .context-section {
        margin: 1.5rem 0;
      }

      .context-section h3 {
        color: #fff;
        margin: 0 0 1rem 0;
        font-size: 1.2rem;
        font-weight: 600;
      }

      .context-item {
        background: var(--surface-dark);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
      }

      .context-item h4 {
        color: var(--accent-blue);
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
        font-weight: 600;
      }

      .context-item p {
        color: var(--text-dark);
        margin: 0;
        line-height: 1.5;
      }

      .context-challenges {
        margin-top: 0.5rem;
      }

      .context-challenges ul {
        margin: 0;
        padding-left: 1.25rem;
      }

      .context-challenges li {
        color: var(--text-dark);
        margin: 0.25rem 0;
      }
      .result-title {
        margin: 0 0 0.5rem 0;
        font-size: 1.1rem;
        font-weight: 600;
      }
      .result-title a {
        color: var(--accent-blue);
        text-decoration: none;
        transition: color 0.2s;
      }
      .result-title a:hover {
        color: var(--accent-dark);
        text-decoration: underline;
      }
      .result-snippet {
        color: var(--text-dark);
        font-size: 0.98rem;
        margin: 0.25rem 0 0 0;
        line-height: 1.5;
      }
      .custom-panel-loader {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        min-height: 180px;
        color: var(--accent-blue);
        font-size: 1.2rem;
        gap: 1.5rem;
      }
      .custom-panel-loader .loader-dots {
        display: flex;
        gap: 8px;
      }
      .custom-panel-loader .loader-dots span {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: var(--accent-blue);
        opacity: 0.7;
        animation: custom-bounce 1s infinite alternate;
      }
      .custom-panel-loader .loader-dots span:nth-child(2) {
        animation-delay: 0.2s;
      }
      .custom-panel-loader .loader-dots span:nth-child(3) {
        animation-delay: 0.4s;
      }
      @keyframes custom-bounce {
        to {
          transform: translateY(-8px);
          opacity: 1;
        }
      }

      /* Animation for custom panel default message */
      @keyframes fadeOpacity {
        0% { opacity: 0.4; }
        25% { opacity: 0.7; }
        50% { opacity: 1; }
        75% { opacity: 0.7; }
        100% { opacity: 0.4; }
      }
      .custom-panel-default-message {
        animation: fadeOpacity 2.5s infinite;
        will-change: opacity;
      }

      /* Animated dots for custom panel placeholder */
      .custom-panel-animated-icon {
        display: flex;
        gap: 0.7rem;
        margin-top: 1.5rem;
      }
      .custom-panel-animated-icon .dot {
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: var(--accent-blue);
        opacity: 0.5;
        animation: bounceDot 1.2s infinite both;
      }
      .custom-panel-animated-icon .dot:nth-child(2) {
        animation-delay: 0.2s;
      }
      .custom-panel-animated-icon .dot:nth-child(3) {
        animation-delay: 0.4s;
      }
      @keyframes bounceDot {
        0%, 100% { transform: translateY(0); opacity: 0.5; }
        30% { transform: translateY(-18px); opacity: 1; }
        60% { transform: translateY(0); opacity: 0.7; }
      }

      /* Compact Progress Bar Styles */
      .progress-bar-container {
        display: none;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        padding: 12px 16px;
        margin: 16px 0;
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        margin: 0;
        border-radius: 0 0 18px 18px;
      }

      .progress-bar-container.show {
        display: block;
        animation: fadeIn 0.3s ease-out;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .progress-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
      }

      .progress-title {
        font-size: 0.9rem;
        font-weight: 600;
        color: var(--text-light);
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .progress-title i {
        color: var(--accent-blue);
        font-size: 1rem;
      }

      .progress-percentage {
        font-size: 0.8rem;
        color: var(--text-dark);
        font-weight: 500;
      }

      .progress-bar {
        width: 100%;
        height: 6px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
        overflow: hidden;
        position: relative;
        margin-bottom: 8px;
      }

      .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, 
          transparent 0%, 
          var(--accent-blue) 20%, 
          var(--accent-blue) 80%, 
          transparent 100%);
        border-radius: 3px;
        width: 100%;
        position: relative;
        animation: progressShimmer 2s ease-in-out infinite;
        background-size: 200% 100%;
      }

      @keyframes progressShimmer {
        0% {
          background-position: -200% 0;
        }
        100% {
          background-position: 200% 0;
        }
      }

      .progress-fill::after {
        display: none;
      }

      .progress-steps {
        display: flex;
        gap: 12px;
        overflow-x: auto;
        padding-bottom: 4px;
        scrollbar-width: none;
        -ms-overflow-style: none;
      }

      .progress-steps::-webkit-scrollbar {
        display: none;
      }

      .progress-step {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 0.75rem;
        color: var(--text-dark);
        transition: all 0.3s ease;
        white-space: nowrap;
        flex-shrink: 0;
      }

      .progress-step.active {
        color: var(--text-light);
        font-weight: 500;
      }

      .progress-step.completed {
        color: #4caf50;
      }

      .progress-step-icon {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.6rem;
        background: rgba(255, 255, 255, 0.1);
        color: var(--text-dark);
        transition: all 0.3s ease;
        flex-shrink: 0;
      }

      .progress-step.active .progress-step-icon {
        background: var(--accent-blue);
        color: white;
      }

      .progress-step.completed .progress-step-icon {
        background: #4caf50;
        color: white;
      }

      .progress-step.completed .progress-step-icon::before {
        content: '✓';
      }

      .progress-step.active .progress-step-icon::before {
        content: '●';
      }

      .progress-step:not(.active):not(.completed) .progress-step-icon::before {
        content: '○';
      }

      .progress-status {
        position: relative;
        font-size: 0.75rem;
        color: var(--text-dark);
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        margin-top: 4px;
        padding: 4px 8px;
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.12) 0%, rgba(255, 255, 255, 0.06) 100%);
        border-radius: 4px;
        border-left: 3px solid;
        border-image: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #667eea 100%) 1;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }
      .progress-status-fill {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        width: 0%;
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.6) 0%, rgba(118, 75, 162, 0.6) 100%);
        z-index: 0;
        transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        border-radius: 4px;
        pointer-events: none;
      }
      .progress-status-content {
        position: relative;
        z-index: 1;
        white-space: pre-line;
      }

      .progress-status.success {
        border-image: linear-gradient(135deg, #4caf50 0%, #66bb6a 50%, #4caf50 100%) 1;
        color: #4caf50;
        background: linear-gradient(135deg, rgba(76, 175, 80, 0.15) 0%, rgba(102, 187, 106, 0.08) 100%);
      }

      .progress-status.error {
        border-image: linear-gradient(135deg, #f44336 0%, #ef5350 50%, #f44336 100%) 1;
        color: #f44336;
        background: linear-gradient(135deg, rgba(244, 67, 54, 0.15) 0%, rgba(239, 83, 80, 0.08) 100%);
      }

      /* Compact Analysis Card Styles for Message Assistant */
      .analysis-container.compact {
        padding: 0.5rem 0;
      }
      .analysis-summary.compact {
        /* background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); */
        color: white;
        padding: 0.75rem 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        /* box-shadow: 0 2px 8px rgba(102, 126, 234, 0.18); */
      }
      .analysis-summary.compact h3 {
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
        font-weight: 600;
      }
      .analysis-summary.compact p {
        margin: 0;
        line-height: 1.5;
        font-size: 0.95rem;
      }
      .key-points.compact {
        background: rgba(255,255,255,0.08);
        padding: 0.6rem 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
      }
      .key-points.compact h4 {
        margin: 0 0 0.4rem 0;
        font-size: 0.95rem;
        font-weight: 600;
      }
      .key-points.compact ul {
        margin: 0;
        padding-left: 1.1rem;
      }
      .key-points.compact li {
        margin: 0.3rem 0;
        line-height: 1.4;
        font-size: 0.95rem;
      }
      .tasks-section.compact {
        margin: 1rem 0;
      }
      .tasks-section.compact h4 {
        color: #fff;
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
        font-weight: 600;
      }
      .task-card.compact {
        background: var(--surface-dark, #2d2d2d);
        border: 1px solid rgba(255,255,255,0.08);
        border-radius: 10px;
        padding: 0.7rem 1rem;
        margin-bottom: 0.7rem;
        box-shadow: 0 1px 4px rgba(0,0,0,0.08);
        position: relative;
      }
      .task-header.compact {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 0.3rem;
        gap: 0.5rem;
      }
      .task-title {
        color: #fff;
        font-weight: 600;
        font-size: 0.98rem;
        flex: 1;
      }
      .task-priority.high {
        background: linear-gradient(135deg, #ff6b6b, #ee5a52);
        color: white;
      }
      .task-priority.medium {
        background: linear-gradient(135deg, #feca57, #ff9ff3);
        color: #2c3e50;
      }
      .task-priority.low {
        background: linear-gradient(135deg, #48dbfb, #0abde3);
        color: white;
      }
      .task-priority {
        padding: 0.18rem 0.7rem;
        border-radius: 16px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        white-space: nowrap;
      }
      .task-description {
        color: #a0a0a0;
        line-height: 1.5;
        margin-bottom: 0.2rem;
        font-size: 0.95rem;
      }
      .recommendations-section.compact {
        margin: 1rem 0;
      }
      .recommendations-section.compact h4 {
        color: #fff;
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
        font-weight: 600;
      }
      .recommendation-item.compact {
        background: rgba(255,255,255,0.05);
        border-left: 4px solid #667eea;
        padding: 0.7rem 1rem;
        margin-bottom: 0.5rem;
        border-radius: 0 7px 7px 0;
        font-size: 0.95rem;
        color: #e0e0e0;
      }

      .msg-analysis-modern {
        background: #23242a;
        border: 1.5px solid #353657;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(30,32,60,0.13);
        margin: 1.2rem 0 0.5rem 0;
        padding: 0.7rem 1.1rem 0.7rem 1.1rem;
        font-size: 0.97rem;
        color: #e0e0e0;
      }
      .msg-analysis-section {
        margin-bottom: 0.7rem;
      }
      .msg-analysis-header {
        font-weight: 600;
        font-size: 0.98rem;
        display: flex;
        align-items: center;
        margin-bottom: 0.3rem;
        padding-left: 0.5rem;
        border-left: 4px solid #667eea;
        letter-spacing: 0.01em;
        gap: 0.4em;
      }
      .msg-analysis-header.summary { border-left-color: #764ba2; }
      .msg-analysis-header.keypoints { border-left-color: #2196f3; }
      .msg-analysis-header.tasks { border-left-color: #43e97b; }
      .msg-analysis-header.recs { border-left-color: #ffb347; }
      .msg-analysis-header .icon {
        font-size: 1.05em;
        margin-right: 0.3em;
        opacity: 0.85;
      }
      .msg-analysis-summary {
        font-size: 0.97rem;
        color: #e0e0e0;
        margin-bottom: 0.2rem;
      }
      .msg-analysis-keypoints {
        list-style: none;
        padding: 0;
        margin: 0;
      }
      .msg-analysis-keypoints li {
        display: flex;
        align-items: flex-start;
        margin-bottom: 0.3rem;
        font-size: 0.96rem;
      }
      .kp-num {
        display: inline-block;
        min-width: 1.5em;
        height: 1.5em;
        background: #2196f3;
        color: #fff;
        border-radius: 50%;
        text-align: center;
        font-weight: 600;
        margin-right: 0.6em;
        font-size: 0.93em;
        line-height: 1.5em;
      }
      .msg-analysis-tasks {
        display: flex;
        flex-direction: column;
        gap: 0.4rem;
      }
      .msg-analysis-task {
        background: #23243a;
        border-radius: 7px;
        padding: 0.5rem 0.8rem;
        border-left: 5px solid #43e97b;
        margin-bottom: 0.1rem;
        box-shadow: 0 1px 4px rgba(67,233,123,0.07);
      }
      .msg-analysis-task.high { border-left-color: #ff6b6b; }
      .msg-analysis-task.medium { border-left-color: #feca57; }
      .msg-analysis-task.low { border-left-color: #48dbfb; }
      .task-title {
        font-weight: 600;
        color: #fff;
        font-size: 0.97rem;
        margin-bottom: 0.1rem;
      }
      .task-desc {
        color: #b0b0b0;
        font-size: 0.95rem;
        margin-bottom: 0.1rem;
      }
      .msg-analysis-recommendations {
        display: flex;
        flex-direction: column;
        gap: 0.3rem;
      }
      .msg-analysis-recommendation {
        font-style: italic;
        border-left: 4px solid #ffb347;
        background: rgba(255,179,71,0.07);
        color: #ffe6b3;
        padding: 0.4rem 0.8rem;
        border-radius: 0 7px 7px 0;
        font-size: 0.95rem;
      }
      .msg-analysis-more {
        color: #aaa;
        font-size: 0.85rem;
        margin: 0.2rem 0 0 0.5rem;
        font-style: italic;
      }

      /* --- Professional Analysis Card Palette for Custom Panel --- */
      .msg-analysis-modern.task-focused {
        background: var(--surface-dark);
        border: 1.5px solid var(--border-color);
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(30,32,60,0.10);
        margin: 1.2rem 0 0.5rem 0;
        padding: 0.7rem 1.1rem 0.7rem 1.1rem;
        font-size: 0.97rem;
        color: var(--text-light);
      }
      .msg-analysis-modern.task-focused .msg-analysis-header {
        font-weight: 700;
        font-size: 1.01rem;
        display: flex;
        align-items: center;
        margin-bottom: 0.3rem;
        padding-left: 0.5rem;
        border-left: 4px solid var(--accent-blue);
        letter-spacing: 0.01em;
        gap: 0.4em;
        background: none;
      }
      .msg-analysis-modern.task-focused .msg-analysis-header.recs {
        border-left-color: var(--accent-green);
      }
      .msg-analysis-modern.task-focused .msg-analysis-header .icon {
        font-size: 1.08em;
        margin-right: 0.3em;
        opacity: 0.85;
      }
      .msg-analysis-modern.task-focused .msg-analysis-summary {
        font-size: 0.97rem;
        color: var(--text-light);
        margin-bottom: 0.2rem;
      }
      .msg-analysis-modern.task-focused .msg-analysis-tasks {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
      }
      .msg-analysis-modern.task-focused .msg-analysis-task {
        background: var(--background-dark);
        border-radius: 7px;
        padding: 0.6rem 1rem 0.6rem 0.9rem;
        border-left: 5px solid var(--accent-blue);
        margin-bottom: 0.1rem;
        box-shadow: 0 1px 4px rgba(30,32,60,0.07);
        margin-top: 0.1rem;
      }
      .msg-analysis-modern.task-focused .msg-analysis-task.high {
        border-left-color: #e57373;
      }
      .msg-analysis-modern.task-focused .msg-analysis-task.medium {
        border-left-color: #ffd54f;
      }
      .msg-analysis-modern.task-focused .msg-analysis-task.low {
        border-left-color: #64b5f6;
      }
      .task-title-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 0.1rem;
        gap: 0.5rem;
      }
      .task-title {
        color: var(--text-light);
        font-weight: 600;
        font-size: 0.98rem;
        flex: 1;
      }
      .task-priority {
        padding: 0.18rem 0.7rem;
        border-radius: 16px;
        font-size: 0.75rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        white-space: nowrap;
        background: var(--surface-dark);
        border: 1.5px solid var(--border-color);
        color: var(--text-dark);
      }
      .task-priority.high {
        background: #e57373;
        color: #fff;
        border: none;
      }
      .task-priority.medium {
        background: #ffd54f;
        color: #333;
        border: none;
      }
      .task-priority.low {
        background: #64b5f6;
        color: #fff;
        border: none;
      }
      .task-desc {
        color: var(--text-dark);
        font-size: 0.95rem;
        margin-bottom: 0.1rem;
      }
      .task-meta {
        display: flex;
        gap: 0.7rem;
        margin-top: 0.2rem;
        font-size: 0.92rem;
        color: var(--text-dark);
        align-items: center;
      }
      .task-time i {
        color: var(--accent-green);
        margin-right: 0.2em;
      }
      .task-resources {
        display: flex;
        gap: 0.3rem;
      }
      .task-resource {
        background: rgba(33,150,243,0.13);
        color: var(--accent-blue);
        padding: 0.13rem 0.6rem;
        border-radius: 12px;
        font-size: 0.85em;
        border: 1px solid #2196f344;
      }
      .msg-analysis-modern.task-focused .msg-analysis-recommendations {
        display: flex;
        flex-direction: column;
        gap: 0.3rem;
      }
      .msg-analysis-modern.task-focused .msg-analysis-recommendation {
        font-style: italic;
        border-left: 4px solid var(--accent-green);
        background: rgba(16,185,129,0.07);
        color: var(--text-light);
        padding: 0.4rem 0.8rem;
        border-radius: 0 7px 7px 0;
        font-size: 0.95rem;
      }
      .msg-analysis-modern.task-focused .msg-analysis-more {
        color: var(--text-dark);
        font-size: 0.85rem;
        margin: 0.2rem 0 0 0.5rem;
        font-style: italic;
      }

      /* Download Slides Button Styles for Test Page */
      .download-slides-btn {
        background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);
        color: white;
        border: none;
        padding: 1rem 2rem;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
        position: relative;
        overflow: hidden;
      }

      .download-slides-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease;
      }

      .download-slides-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(33, 150, 243, 0.4);
      }

      .download-slides-btn:hover::before {
        left: 100%;
      }

      .download-slides-btn:active {
        transform: translateY(0);
        box-shadow: 0 2px 10px rgba(33, 150, 243, 0.3);
      }

      .download-slides-btn i {
        font-size: 1.1rem;
      }

      .download-slides-btn.loading {
        background: linear-gradient(135deg, #a0a0a0 0%, #2d2d2d 100%);
        cursor: not-allowed;
        pointer-events: none;
      }

      .download-slides-btn.loading i {
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
    </style>
  </head>
  <body>
    <div class="panel-container">
      <!-- Chat Panel -->
      <div class="chat-panel">
        <div class="panel-header">
          <h2>Chat Assistant</h2>
        </div>
        <div class="messages-container">
          <div id="chatPanelPlaceholder" style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; min-height: 220px;">
            <div class="welcome-circle"></div>
            <h1 style="margin-bottom: 0.5rem; font-size: 2rem;">Search Analysis</h1>
            <p style="color: #888; text-align: center; max-width: 320px; margin-bottom: 1.5rem;">Start a conversation or search to see messages here.</p>
            <div class="pulse-circles">
              <div class="pulse-circle"></div>
              <div class="pulse-circle"></div>
              <div class="pulse-circle"></div>
            </div>
          </div>
          <div id="loadingMessage" class="loading-message"></div>
          <% if (results && results.length > 0) { %>
            <% results.forEach((result) => { %>
              <div class="message <%= result.role %>"><%= result.content %></div>
            <% }); %>
          <% } %>
        </div>
        <form id="chatForm" class="chat-form">
          <div class="input-group">
            <input
              type="text"
              id="queryInput"
              placeholder="Type your message..."
              required
            />
            <button type="submit"><i class="fa-solid fa-paper-plane"></i></button>
          </div>
        </form>
        <!-- Toggle icon always visible on right edge of chat-panel -->
        <div class="custom-panel-toggle" id="customPanelToggle" title="Toggle panel">
          <i class="fa-solid fa-bars" id="customPanelToggleIcon" aria-label="Open panel"></i>
        </div>
      </div>

      <!-- Web Results Panel -->
      <div class="web-panel">
        <div id="web-results" class="web-results">
          <div class="panel-header">
            <h2>Search Results</h2>
          </div>
        </div>
      </div>

      <!-- Custom Independent Panel -->
      <div class="custom-panel" id="customPanel">
        <div class="custom-panel-content">
          <!-- Animated placeholder shown until first query -->
          <div id="customPanelPlaceholder" style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; min-height: 220px;">
            <div class="custom-panel-animated-icon">
              <span class="dot"></span>
              <span class="dot"></span>
              <span class="dot"></span>
            </div>
            <div style="margin-top: 2rem; color: var(--text-dark); font-size: 1.13rem; text-align: center; max-width: 320px;">
              Start a conversation or search to see web results here.
            </div>
          </div>

          <div id="customPanelTabs" class="results-tabs" style="display:none;">
            <button id="tabAnalysis" class="tab active">Analysis</button>
            <button id="tabWebResults" class="tab">Web Results</button>
          </div>
          <div id="customPanelTabContent">
            <!-- Tab content will be rendered here -->
          </div>
          <div id="mockTerminalContainer" class="mock-terminal-container" style="display: none; margin-bottom: 1.5rem;">
            <div class="mock-terminal-window">
              <pre class="mock-terminal-shell-content" id="mockTerminalContent">
<span class="prompt">user@websearch:<span class="tilde">~</span> <span class="dollar">$</span></span> <span class="shell-cmd">Processing: <b>${query.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</b></span>
              </pre>
            </div>
            <div class="terminal-footer">
              <span class="mock-terminal-checklist" id="mockTerminalFooter">Fetching results...</span>
            </div>
          </div>
          <div id="customPanelBody" class="custom-panel-default-message" style="color: var(--text-dark); font-size: 1.08rem; text-align: center; margin-top: 2.5rem; display: none;">
            <i class="fa-solid fa-magnifying-glass" style="font-size: 2.2rem; color: var(--accent-blue); margin-bottom: 1rem;"></i>
            <div style="margin-top: 1rem;">Web search results will be displayed here.</div>
          </div>
          <div id="customPanelResults"></div>
          
          <!-- Progress Bar Container - Now at bottom -->
          <div id="progressBarContainer" class="progress-bar-container">
            <div class="progress-header">
              <div class="progress-title">
                <i class="fas fa-cogs"></i>
                Processing Request
        </div>
              <div class="progress-percentage" id="progressPercentage">0%</div>
            </div>
            <div class="progress-bar">
              <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="progress-status" id="progressStatus">
              <div class="progress-status-fill" id="progressStatusFill"></div>
              <span class="progress-status-content" id="progressStatusContent">Initializing...</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- End of panel-container -->

    <script>
      // Typewriter effect function (top-level, reusable)
      function typewriterEffect(element, speed = 8) { // Faster speed
        console.log('Typewriter effect called for:', element);
        const html = element.innerHTML;
        element.innerHTML = '';
        let i = 0;
        function type() {
          if (i < html.length) {
            // Handle HTML tags: print whole tag at once
            if (html[i] === '<') {
              const close = html.indexOf('>', i);
              if (close !== -1) {
                element.innerHTML += html.slice(i, close + 1);
                i = close + 1;
              } else {
                element.innerHTML += html[i++];
              }
            } else {
              element.innerHTML += html[i++];
            }
            setTimeout(type, speed);
          }
        }
        type();
        element.classList.add('typewriter-done');
      }

      // Simple markdown parser for the client side
      function parseMarkdown(text) {
        // First, normalize line endings and remove excess whitespace
        text = text
          .replace(/\r\n/g, "\n")
          .replace(/\n{3,}/g, "\n\n")
          .trim();

        return (
          text
            // Headers with proper spacing
            .replace(/^## (.*$)/gm, "<h2>$1</h2>\n")
            .replace(/^### (.*$)/gm, "<h3>$1</h3>\n")
            // Bold
            .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
            // Italic
            .replace(/\*(.*?)\*/g, "<em>$1</em>")
            // Bullet lists with proper spacing
            .replace(/^\s*[\-\*]\s(.+)/gm, "<li>$1</li>")
            .replace(/(<li>.*<\/li>\n?)+/g, "<ul>$&</ul>\n")
            // Numbered lists with proper spacing
            .replace(/^\d+\.\s(.+)/gm, "<li>$1</li>")
            .replace(/(<li>.*<\/li>\n?)+/g, "<ol>$&</ol>\n")
            // Paragraphs with proper spacing
            .replace(/\n\n/g, "</p><p>")
            // Preserve line breaks within paragraphs
            .replace(/\n/g, "<br>")
            // Ensure content is wrapped in a paragraph
            .replace(/^(.+?)(?=<\/p>|$)/, "<p>$1")
            .replace(/(?<=<\/p>)(.+?)$/, "<p>$1</p>")
        );
      }

      // Renders structured web and image results for the custom panel
      function renderStructuredWebResults(results) {
        // This function is now only used to render the web search cards (not images)
        let html = '';
        if (results.organic_results && results.organic_results.length > 0) {
          html += '<div class="structured-web-results">';
          results.organic_results.forEach((result, index) => {
            let imageHtml = '';
            const imageResult = results.image_results && results.image_results[index];
            if (imageResult) {
              const imageSrc = imageResult.src?.thumbnail || imageResult.src?.medium || imageResult.src?.original || imageResult.thumbnail || imageResult.image || imageResult.src || '';
              if (imageSrc) {
                imageHtml = `<div class='search-result-image'><img src='${imageSrc}' alt='Result image' style='width: 100%; height: 120px; object-fit: cover; border-radius: 8px;'></div>`;
              }
            }
            const validLink = result.link && result.link.startsWith('http') ? result.link : '#';
            html += `
              <div class="search-result card" style="opacity:0;">
                ${imageHtml}
                <div class="search-result-content">
                  <h3 class="result-title">
                    <a href="${validLink}" target="_blank" rel="noopener noreferrer">
                      ${result.title || 'No title'}
                    </a>
                  </h3>
                  <p class="result-snippet">${result.snippet || result.body || 'No description available'}</p>
                  <div class="result-url" style="font-size: 0.8rem; color: var(--text-dark); margin-top: 0.5rem;">
                    ${result.link || 'No URL'}
                  </div>
                </div>
              </div>
        `;
          });
          html += '</div>';
        }
        if (!html) {
          html = '<p>No web results found</p>';
        }
        return html;
      }

      // Helper: Render images in groups of 2, one group at a time, stacked vertically, nearly full width
      async function showGroupedImagesFullWidth(imageResults, container, groupSize = 2, delay = 900) {
        container.innerHTML = '';
        if (!imageResults || imageResults.length === 0) return;
        let groupIndex = 0;
        // Create a parent container for spacing
        const parentDiv = document.createElement('div');
        parentDiv.style.width = '100%';
        parentDiv.style.padding = '18px 0 18px 0'; // Top and bottom spacing
        parentDiv.style.display = 'flex';
        parentDiv.style.justifyContent = 'center';
        parentDiv.style.alignItems = 'center';
        container.appendChild(parentDiv);
        // The group div for the images
        const groupDiv = document.createElement('div');
        groupDiv.style.width = '70%'; // Reduced width from calc(100% - 15px)
        groupDiv.style.margin = '0 auto';
        groupDiv.style.display = 'flex';
        groupDiv.style.flexDirection = 'column';
        groupDiv.style.justifyContent = 'center';
        groupDiv.style.alignItems = 'center';
        groupDiv.style.gap = '0'; // No gap between images
        groupDiv.style.transition = 'opacity 0.4s';
        parentDiv.appendChild(groupDiv);
        // Collect promises for image loading
        const imageLoadPromises = [];
        while (groupIndex * groupSize < imageResults.length) {
          groupDiv.innerHTML = '';
          const group = imageResults.slice(groupIndex * groupSize, (groupIndex + 1) * groupSize);
          group.forEach((img) => {
            const imageSrc = img.src?.thumbnail || img.src?.medium || img.src?.original || img.thumbnail || img.image || img.src || '';
            const imageUrl = img.href || img.link || imageSrc || '';
            const displayUrl = imageUrl.length > 60 ? imageUrl.slice(0, 57) + '...' : imageUrl;
            const imageCard = document.createElement('div');
            imageCard.className = 'image-result';
            imageCard.style.width = '100%';
            imageCard.style.margin = '0';
            imageCard.style.padding = '0';
            imageCard.innerHTML = `
              <div style="background:rgba(30,30,30,0.92);color:#fff;font-size:0.93rem;padding:7px 14px 6px 14px;border-radius:10px 10px 0 0;max-width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;margin-bottom:0;box-shadow:0 2px 8px rgba(0,0,0,0.08);">
                <a href="${imageUrl}" target="_blank" rel="noopener noreferrer" style="color:#7ec3fa;text-decoration:none;max-width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;display:inline-block;vertical-align:middle;">
                  ${displayUrl}
                </a>
              </div>
              <a href="${imageUrl}" target="_blank" rel="noopener noreferrer" style="display:block;width:100%;padding:0;margin:0;">
                <img src="${imageSrc}" alt="Image result" style="width:100%;object-fit:cover;display:block;border-radius:0 0 16px 16px;box-shadow:0 4px 16px rgba(0,0,0,0.10);margin:0;padding:0;" />
              </a>
            `;
            groupDiv.appendChild(imageCard);
            // Wait for image to load
            const imgTag = imageCard.querySelector('img');
            if (imgTag) {
              imageLoadPromises.push(new Promise((resolve) => {
                if (imgTag.complete) {
                  resolve();
                } else {
                  imgTag.onload = () => resolve();
                  imgTag.onerror = () => resolve(); // resolve on error to avoid hanging
                }
              }));
            }
          });
          groupDiv.style.opacity = '1';
          // Wait for all images to load, then delay
          await Promise.all(imageLoadPromises);
          await new Promise(res => setTimeout(res, 1500));
          groupIndex++;
        }
        // Fade out after last group
        groupDiv.style.opacity = '1';
        await new Promise(res => setTimeout(res, 400));
        groupDiv.style.opacity = '0';
        await new Promise(res => setTimeout(res, 400));
        container.innerHTML = '';
      }

      document.addEventListener("DOMContentLoaded", () => {
        const chatForm = document.getElementById("chatForm");
        const queryInput = document.getElementById("queryInput");
        const messagesContainer = document.querySelector(".messages-container");
        const webResults = document.getElementById("web-results");
        const imageResults = document.getElementById("image-results");
        const webPanel = document.querySelector(".web-panel");
        const customPanel = document.getElementById("customPanel");
        const customPanelToggle = document.getElementById("customPanelToggle");
        const customPanelToggleIcon = document.getElementById("customPanelToggleIcon");
        const customPanelBody = document.getElementById("customPanelBody");
        const customPanelPlaceholder = document.getElementById("customPanelPlaceholder");
        const chatPanelPlaceholder = document.getElementById("chatPanelPlaceholder");
        const customPanelTabs = document.getElementById("customPanelTabs");
        const tabAnalysis = document.getElementById("tabAnalysis");
        const tabWebResults = document.getElementById("tabWebResults");
        const customPanelTabContent = document.getElementById("customPanelTabContent");
        
        // Progress bar elements
        const progressBarContainer = document.getElementById("progressBarContainer");
        const progressFill = document.getElementById("progressFill");
        const progressPercentage = document.getElementById("progressPercentage");
        const progressSteps = document.getElementById("progressSteps");
        const progressStatus = document.getElementById("progressStatus");

        // Progress bar control functions
        function showProgressBar() {
          progressBarContainer.classList.add('show');
          progressFill.style.width = '100%';
          progressPercentage.textContent = 'Loading...';
          // Only update the content span, not the whole progressStatus element
          const statusContent = document.getElementById('progressStatusContent');
          if (statusContent) statusContent.textContent = 'Initializing...';
          progressStatus.className = 'progress-status';
        }

        function hideProgressBar() {
          progressBarContainer.classList.remove('show');
        }

        function completeProgress() {
          // Stop the shimmer animation and show completion
          progressFill.style.animation = 'none';
          progressFill.style.background = 'var(--accent-blue)';
          progressFill.style.width = '100%';
          progressPercentage.textContent = '100%';
        }

        function updateProgress(step, percentage, status, isError = false) {
          // Only update if progress bar is visible
          if (!progressBarContainer.classList.contains('show')) {
            return;
          }
          
          // Keep the loading animation running, just update status
          progressPercentage.textContent = 'Loading...';
          
          // Update status with step info
          const stepNames = [
            '',
            'Validate',
            'Check Search',
            'LLM Decision',
            'Web Search',
            'Image Search',
            'Generate Response',
            'Send Response'
          ];
          let stepLabel = step >= 1 && step <= 7 ? stepNames[step] : '';
          const statusText = `Step ${step} of 7: ${status}`;
          
          // Update the fill behind the status text with same smooth animation
          const statusFill = document.getElementById('progressStatusFill');
          if (statusFill) statusFill.style.width = `${percentage}%`;
          
          // Update the status text content
          const statusContent = document.getElementById('progressStatusContent');
          if (statusContent) statusContent.textContent = statusText;
          
          // Error styling
          progressStatus.className = `progress-status${isError ? ' error' : ''}`;
        }

        // Apply typewriter effect to all assistant messages on load (if not already animated)
        document.querySelectorAll('.message.assistant').forEach(msg => {
          if (!msg.classList.contains('typewriter-done')) {
            console.log('Applying typewriter to:', msg);
            typewriterEffect(msg);
          }
        });

        // Render analysis within message
        function renderAnalysisInMessage(analysis) {
          let html = `<div class="msg-analysis-modern task-focused">`;
          // Optional: Brief summary
          if (analysis.summary) {
            html += `
              <div class="msg-analysis-section">
                <div class="msg-analysis-header summary"><span class="icon">📝</span>Action Plan</div>
                <div class="msg-analysis-summary">${analysis.summary}</div>
              </div>
            `;
          }
          // Tasks (main content)
          if (analysis.tasks && analysis.tasks.length > 0) {
            html += `
              <div class="msg-analysis-section">
                <div class="msg-analysis-tasks">
                  ${analysis.tasks.map(task => `
                    <div class="msg-analysis-task ${task.priority || 'medium'}">
                      <div class="task-title-row">
                        <span class="task-title">${task.title}</span>
                        <span class="task-priority ${task.priority || 'medium'}">${task.priority ? task.priority.toUpperCase() : 'MEDIUM'}</span>
                      </div>
                      <div class="task-desc">${task.description}</div>
                      ${(task.estimatedTime || (task.resources && task.resources.length > 0)) ? `
                        <div class="task-meta">
                          ${task.estimatedTime ? `<span class="task-time"><i class='fas fa-clock'></i> ${task.estimatedTime}</span>` : ''}
                          ${task.resources && task.resources.length > 0 ? `<span class="task-resources">${task.resources.map(r => `<span class='task-resource'>${r}</span>`).join('')}</span>` : ''}
                        </div>
                      ` : ''}
                    </div>
                  `).join('')}
                </div>
              </div>
            `;
          } else {
            html += `<div class='msg-analysis-section'><em>No actionable tasks found.</em></div>`;
          }
          // Recommendations (optional)
          if (analysis.recommendations && analysis.recommendations.length > 0) {
            html += `
              <div class="msg-analysis-section">
                <div class="msg-analysis-header recs"><span class="icon">💡</span>Recommendations</div>
                <div class="msg-analysis-recommendations">
                  ${analysis.recommendations.slice(0, 3).map(rec => `<div class="msg-analysis-recommendation">${rec}</div>`).join('')}
                  ${analysis.recommendations.length > 3 ? `<div class='msg-analysis-more'>...and ${analysis.recommendations.length-3} more</div>` : ''}
                </div>
              </div>
            `;
          }
          html += `</div>`;
          return html;
        }

        chatForm.addEventListener("submit", async (e) => {
          e.preventDefault();

          // Disable form while processing
          queryInput.disabled = true;
          const submitButton = chatForm.querySelector('button[type="submit"]');
          submitButton.disabled = true;
          // Also add a class to visually indicate disabled state (optional)
          const inputGroup = chatForm.querySelector('.input-group');
          inputGroup.classList.add('disabled');

          // Hide chat panel placeholder immediately on first query
          if (chatPanelPlaceholder && chatPanelPlaceholder.style.display !== 'none') {
            chatPanelPlaceholder.style.display = 'none';
          }
          // Hide custom panel placeholder and body
          if (customPanelPlaceholder && customPanelPlaceholder.style.display !== 'none') {
            customPanelPlaceholder.style.display = 'none';
          }
          if (customPanelBody && customPanelBody.style.display !== 'none') {
            customPanelBody.style.display = 'none';
          }

          const query = queryInput.value.trim();
          if (!query) {
            // Re-enable form if query is empty
            queryInput.disabled = false;
            submitButton.disabled = false;
            inputGroup.classList.remove('disabled');
            return;
          }

          // Store the query for download button access
          window.lastQuery = query;

          // Show "Searching on web..." in web panel for all queries
          webResults.innerHTML = `
            <div class="panel-header">
              <h2>Web Search Results</h2>
            </div>
            <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 200px; color: var(--text-dark);">
              <div class="custom-panel-animated-icon">
                <span class="dot"></span>
                <span class="dot"></span>
                <span class="dot"></span>
              </div>
              <div style="margin-top: 1rem; font-size: 1.1rem;">Searching on web...</div>
            </div>
          `;
          // document.body.classList.add("has-search-results"); // Removed - web panel is hidden

          // Show mock terminal for any query
          const mockTerminal = document.getElementById('mockTerminalContainer');
          const mockTerminalContent = document.getElementById('mockTerminalContent');
          const mockTerminalFooter = document.getElementById('mockTerminalFooter');
          if (mockTerminal) {
            mockTerminal.style.display = '';
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML = '';
              // Show the process steps in the mock terminal as they happen
              const steps = [
                'Validating input...',
                'Checking if web search is needed...',
                'Calling LLM for decision...',
                'Performing web search (if needed)...',
                'Performing image search (if needed)...',
                'Generating LLM response...',
                'Sending response to user...'
              ];
              // Show the first step immediately
              mockTerminalContent.innerHTML += `<span class="prompt">user@websearch:<span class="tilde">~</span> <span class="dollar">$</span></span> <span class="shell-cmd">${steps[0]}</span>\n`;
            }
            if (mockTerminalFooter) {
              mockTerminalFooter.textContent = 'Processing...';
            }
          }

          // Add user message
          const userMessage = document.createElement("div");
          userMessage.className = "message user";
          userMessage.textContent = query;
          messagesContainer.appendChild(userMessage);

          // Create and insert loading message right after user message
          const loadingMessage = document.createElement("div");
          loadingMessage.className = "loading-message";
          userMessage.insertAdjacentElement('afterend', loadingMessage);

          // Clear input
          queryInput.value = "";

          // Always open the custom panel on any query
          customPanel.classList.add("open");
          document.body.classList.add("custom-panel-open");
          document.body.classList.add("show-panel-toggle");

          // Show loading message based on query type
          loadingMessage.style.display = "block";
          loadingMessage.textContent = "Answering...";

          // Hide existing content and show progress bar immediately
          customPanelTabs.style.display = 'none';
          customPanelTabContent.innerHTML = '';
          showProgressBar();

          try {
            // Step 1: Validating input
            updateProgress(1, 10, 'Validating input...');
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Validating input...</span>\n`;
            }
            await new Promise(resolve => setTimeout(resolve, 800));
            
            // Step 2: Checking if web search is needed
            updateProgress(2, 20, 'Checking search need...');
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Checking if web search is needed...</span>\n`;
            }
            await new Promise(resolve => setTimeout(resolve, 800));
            
            // Step 3: Calling LLM for decision
            updateProgress(3, 30, 'LLM decision...');
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Calling LLM for decision...</span>\n`;
            }
            
            const response = await fetch("/test/search", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ query }),
            });

            const data = await response.json();

            // Set loading message based on query type
            if (typeof data.isConversational !== 'undefined') {
              if (data.isConversational) {
                loadingMessage.textContent = 'Answering...';
              } else {
                loadingMessage.textContent = 'Searching on web...';
              }
            }

            // Continue or hide progress bar based on query type
            if (typeof data.isConversational !== 'undefined' && !data.isConversational) {
              // Continue progress bar for non-conversational queries
              
              // Step 4: Performing web search
              updateProgress(4, 40, 'Web search...');
              if (mockTerminalContent) {
                mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Performing web search (if needed)...</span>\n`;
              }
              await new Promise(resolve => setTimeout(resolve, 800));
              
              // Step 5: Performing image search
              updateProgress(5, 60, 'Image search...');
              if (mockTerminalContent) {
                mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Performing image search (if needed)...</span>\n`;
              }
              await new Promise(resolve => setTimeout(resolve, 800));

            // Step 6: Generating LLM response
              updateProgress(6, 80, 'Generating response...');
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Generating LLM response...</span>\n`;
            }
              await new Promise(resolve => setTimeout(resolve, 800));
              
            // Step 7: Sending response to user
              updateProgress(7, 90, 'Sending response...');
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Sending response to user...</span>\n`;
            }
              await new Promise(resolve => setTimeout(resolve, 800));
              
              // Final success status - only reach 100% once
              updateProgress(7, 100, 'Completed successfully!', false);
              await new Promise(resolve => setTimeout(resolve, 1000));
              
              // Complete the progress bar animation
              completeProgress();
              await new Promise(resolve => setTimeout(resolve, 500));
              
              // Hide progress bar after completion
              hideProgressBar();
            } else {
              // Hide progress bar for conversational queries
              hideProgressBar();
              
              // For conversational queries, just show the terminal steps
              if (mockTerminalContent) {
                mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Performing web search (if needed)...</span>\n`;
                mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Performing image search (if needed)...</span>\n`;
                mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Generating LLM response...</span>\n`;
                mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\">Sending response to user...</span>\n`;
              }
            }
            
            if (mockTerminalFooter) {
              mockTerminalFooter.textContent = 'Results loaded.';
            }
            
            // DEBUG: Log the full response
            console.log('TEST SEARCH RESPONSE:', data);
            console.log('🔍 DEBUG - imageResults[0]:', data.imageResults?.[0]);
            console.log('🔍 DEBUG - imageResults[0].src:', data.imageResults?.[0]?.src);
            console.log('🔍 DEBUG - imageResults[0].src keys:', data.imageResults?.[0]?.src ? Object.keys(data.imageResults[0].src) : 'no src');

            // Handle response based on whether it's conversational or not
            if (typeof data.isConversational !== 'undefined' && !data.isConversational) {
              // Progress bar is already hidden, just show results for non-conversational queries
              
              // Hide tabs initially
              customPanelTabs.style.display = 'none';
              tabWebResults.classList.remove('active');
              tabAnalysis.classList.add('active');
              // 1. Show grouped images first (if any)
              if (data.imageResults && data.imageResults.length > 0) {
                await showGroupedImagesFullWidth(data.imageResults, customPanelTabContent, 2, 900);
              }
              // 2. After grouped images, show tabs and default to Analysis if available, otherwise Deep Answer
              customPanelTabs.style.display = '';
              if (data.needsAnalysis && data.analysisResponse) {
                tabAnalysis.classList.add('active');
                tabWebResults.classList.remove('active');
                renderAnalysisTab();
              } else {
                tabAnalysis.classList.remove('active');
                tabWebResults.classList.add('active');
                renderWebResultsTab();
              }
              // Tab switching logic
              tabAnalysis.onclick = function() {
                tabAnalysis.classList.add('active');
                tabWebResults.classList.remove('active');
                renderAnalysisTab();
              };
              tabWebResults.onclick = function() {
                tabWebResults.classList.add('active');
                tabAnalysis.classList.remove('active');
                renderWebResultsTab();
              };
            } else {
              // For conversational queries, progress bar is already hidden, show simple message
              customPanelTabs.style.display = 'none';
              customPanelTabContent.innerHTML = '';
            }

            // Remove loading message from DOM
            loadingMessage.remove();

            // Handle web panel visibility based on response type
            if (data.isConversational) {
              // document.body.classList.remove("has-search-results"); // Removed - web panel is hidden
              // Add a simple response for conversational queries
              const assistantMessage = document.createElement("div");
              assistantMessage.className = "message assistant";
              assistantMessage.textContent = data.message || "This appears to be a conversational query. Please use the main chat interface for better assistance.";
              messagesContainer.appendChild(assistantMessage);
              // Typewriter effect for conversational assistant message
              console.log('Applying typewriter to conversational assistant message:', assistantMessage);
              typewriterEffect(assistantMessage);
            } else {
              // For web search results, display the LLM response in chat panel
              if (data.llmResponse) {
                const assistantMessage = document.createElement("div");
                assistantMessage.className = "message assistant";

                // Improved slide splitting logic
                function splitSlidesByHeadingsOrParagraphs(text) {
                  // Try to split by markdown headings
                  const headingRegex = /(^|\n)(#+ .+?)(?=\n#|$)/gs;
                  let matches = [...text.matchAll(headingRegex)];
                  if (matches.length > 0) {
                    // Each heading section is a slide
                    return matches.map(m => m[2] + text.slice(m.index + m[2].length, (matches[matches.indexOf(m)+1]?.index) || undefined));
                  } else {
                    // Fallback: group every 5 paragraphs into a slide
                    const paragraphs = text.split(/\n\s*\n+/).map(p => p.trim()).filter(Boolean);
                    const slides = [];
                    for (let i = 0; i < paragraphs.length; i += 5) {
                      slides.push(paragraphs.slice(i, i+5).join("\n\n"));
                    }
                    return slides;
                  }
                }

                const slides = splitSlidesByHeadingsOrParagraphs(data.llmResponse)
                  .map(p => parseMarkdown(p.trim()))
                  .filter(Boolean);

                let currentSlide = 0;

                function renderSlide(idx) {
                  assistantMessage.innerHTML = '';
                  const slideDiv = document.createElement('div');
                  slideDiv.className = 'assistant-slide';
                  slideDiv.innerHTML = slides[idx];
                  assistantMessage.appendChild(slideDiv);

                  // Progress indicator
                  if (slides.length > 1) {
                    const progress = document.createElement('div');
                    progress.className = 'assistant-slide-progress';
                    progress.textContent = `Slide ${idx + 1} of ${slides.length}`;
                    assistantMessage.appendChild(progress);
                  }

                  // Navigation
                  if (slides.length > 1) {
                    const nav = document.createElement('div');
                    nav.className = 'assistant-slide-nav';
                    const prevBtn = document.createElement('button');
                    prevBtn.textContent = 'Previous';
                    prevBtn.disabled = idx === 0;
                    prevBtn.onclick = () => { currentSlide--; renderSlide(currentSlide); };
                    const nextBtn = document.createElement('button');
                    nextBtn.textContent = 'Next';
                    nextBtn.disabled = idx === slides.length - 1;
                    nextBtn.onclick = () => { currentSlide++; renderSlide(currentSlide); };
                    const downloadBtn = document.createElement('button');
                    downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download';
                    downloadBtn.className = 'download-slides-btn';
                    downloadBtn.onclick = async () => {
                      // Add loading state
                      downloadBtn.classList.add('loading');
                      downloadBtn.innerHTML = '<i class="fas fa-spinner"></i> Generating...';
                      
                      try {
                        // Prepare the data to send
                        const slideData = {
                          query: window.lastQuery || 'Search Results',
                          analysis: {
                            summary: data.llmResponse || 'Analysis based on web search results',
                            keyPoints: data.analysisResponse?.keyPoints || [],
                            analysis: {
                              contentQuality: 'Based on web search results',
                              credibility: 'Multiple sources analyzed',
                              relevance: 'Directly related to query',
                              insights: 'Comprehensive analysis provided'
                            }
                          },
                          searchResults: (data.webResults || []).map(result => ({
                            title: result.title,
                            snippet: result.body || result.snippet,
                            link: result.href || result.link,
                            displayed_link: result.href || result.link
                          })),
                          images: data.imageResults || [],
                          timestamp: new Date().toISOString()
                        };

                        // Send request to generate slides
                        const response = await fetch('/download-slides', {
                          method: 'POST',
                          headers: {
                            'Content-Type': 'application/json',
                          },
                          body: JSON.stringify(slideData)
                        });

                        if (response.ok) {
                          // Create download link
                          const blob = await response.blob();
                          const url = window.URL.createObjectURL(blob);
                          const a = document.createElement('a');
                          a.href = url;
                          a.download = `slides_${(window.lastQuery || 'search').replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().split('T')[0]}.html`;
                          document.body.appendChild(a);
                          a.click();
                          window.URL.revokeObjectURL(url);
                          document.body.removeChild(a);
                          
                          // Show success message
                          downloadBtn.innerHTML = '<i class="fas fa-check"></i> Downloaded!';
                          setTimeout(() => {
                            downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download';
                            downloadBtn.classList.remove('loading');
                          }, 2000);
                        } else {
                          throw new Error('Failed to generate slides');
                        }
                      } catch (error) {
                        console.error('Error downloading slides:', error);
                        downloadBtn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Failed';
                        setTimeout(() => {
                          downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download';
                          downloadBtn.classList.remove('loading');
                        }, 2000);
                      }
                    };
                    nav.appendChild(prevBtn);
                    nav.appendChild(nextBtn);
                    nav.appendChild(downloadBtn);
                    assistantMessage.appendChild(nav);
                  } else {
                    // Even if there's only one slide, show download button
                    const nav = document.createElement('div');
                    nav.className = 'assistant-slide-nav';
                    const downloadBtn = document.createElement('button');
                    downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download';
                    downloadBtn.className = 'download-slides-btn';
                    downloadBtn.onclick = async () => {
                      // Add loading state
                      downloadBtn.classList.add('loading');
                      downloadBtn.innerHTML = '<i class="fas fa-spinner"></i> Generating...';
                      
                      try {
                        // Prepare the data to send
                        const slideData = {
                          query: window.lastQuery || 'Search Results',
                          analysis: {
                            summary: data.llmResponse || 'Analysis based on web search results',
                            keyPoints: data.analysisResponse?.keyPoints || [],
                            analysis: {
                              contentQuality: 'Based on web search results',
                              credibility: 'Multiple sources analyzed',
                              relevance: 'Directly related to query',
                              insights: 'Comprehensive analysis provided'
                            }
                          },
                          searchResults: (data.webResults || []).map(result => ({
                            title: result.title,
                            snippet: result.body || result.snippet,
                            link: result.href || result.link,
                            displayed_link: result.href || result.link
                          })),
                          images: data.imageResults || [],
                          timestamp: new Date().toISOString()
                        };

                        // Send request to generate slides
                        const response = await fetch('/download-slides', {
                          method: 'POST',
                          headers: {
                            'Content-Type': 'application/json',
                          },
                          body: JSON.stringify(slideData)
                        });

                        if (response.ok) {
                          // Create download link
                          const blob = await response.blob();
                          const url = window.URL.createObjectURL(blob);
                          const a = document.createElement('a');
                          a.href = url;
                          a.download = `slides_${(window.lastQuery || 'search').replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().split('T')[0]}.html`;
                          document.body.appendChild(a);
                          a.click();
                          window.URL.revokeObjectURL(url);
                          document.body.removeChild(a);
                          
                          // Show success message
                          downloadBtn.innerHTML = '<i class="fas fa-check"></i> Downloaded!';
                          setTimeout(() => {
                            downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download';
                            downloadBtn.classList.remove('loading');
                          }, 2000);
                        } else {
                          throw new Error('Failed to generate slides');
                        }
                      } catch (error) {
                        console.error('Error downloading slides:', error);
                        downloadBtn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Failed';
                        setTimeout(() => {
                          downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download';
                          downloadBtn.classList.remove('loading');
                        }, 2000);
                      }
                    };
                    nav.appendChild(downloadBtn);
                    assistantMessage.appendChild(nav);
                  }
                }

                renderSlide(currentSlide);
                messagesContainer.appendChild(assistantMessage);
              } else if (data.webResults && data.webResults.length > 0) {
                // Fallback: if no LLM response but we have web results
                const assistantMessage = document.createElement("div");
                assistantMessage.className = "message assistant";
                assistantMessage.textContent = `I found ${data.webResults.length} web results for your query. You can view them in the panel on the right.`;
                messagesContainer.appendChild(assistantMessage);
              } else if (!data.isConversational) {
                // No results found and not conversational
                const assistantMessage = document.createElement("div");
                assistantMessage.className = "message assistant";
                assistantMessage.textContent = "I couldn't find any relevant information for your query. Please try rephrasing your question.";
                messagesContainer.appendChild(assistantMessage);
              }
            }

            // Scroll chat to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;

            // On first query, hide placeholder and show results message
            if (customPanelPlaceholder && customPanelPlaceholder.style.display !== 'none') {
              customPanelPlaceholder.style.display = 'none';
              customPanelBody.style.display = '';
            }

            // Hide chat panel placeholder on first query
            if (chatPanelPlaceholder && chatPanelPlaceholder.style.display !== 'none') {
              chatPanelPlaceholder.style.display = 'none';
            }

            // Re-enable form after successful response
            queryInput.disabled = false;
            submitButton.disabled = false;
            inputGroup.classList.remove('disabled');
          } catch (error) {
            // Show error in progress bar (it's always shown initially)
            updateProgress(7, 100, `Error: ${error.message.substring(0, 30)}${error.message.length > 30 ? '...' : ''}`, true);
            await new Promise(resolve => setTimeout(resolve, 1000));
            hideProgressBar();
            
            // On error, append error to mock terminal
            if (mockTerminalContent) {
              mockTerminalContent.innerHTML += `<span class=\"prompt\">user@websearch:<span class=\"tilde\">~</span> <span class=\"dollar\">$</span></span> <span class=\"shell-cmd\" style=\"color:red\">Error: ${error.message}</span>\n`;
            }
            if (mockTerminalFooter) {
              mockTerminalFooter.textContent = 'Error occurred.';
            }
            console.error("Error:", error);
            const errorMessage = document.createElement("div");
            errorMessage.className = "message assistant error";
            errorMessage.textContent =
              "Sorry, there was an error processing your request.";
            messagesContainer.appendChild(errorMessage);
            document.body.classList.remove("has-search-results");

            // Re-enable form after error
            queryInput.disabled = false;
            submitButton.disabled = false;
            inputGroup.classList.remove('disabled');
            customPanelTabs.style.display = 'none';
            customPanelTabContent.innerHTML = '';
            // Hide progress bar (it's always shown initially)
            hideProgressBar();
          }
        });

        function updateSearchResults(results) {
          console.log('🔍 DEBUG - updateSearchResults called with:', results);
          console.log('🔍 DEBUG - results.results length:', results.results?.length);
          console.log('🔍 DEBUG - results.imageResults length:', results.imageResults?.length);
          console.log('🔍 DEBUG - results.imageResults:', results.imageResults);
          
          // Always show the web panel after a search
          document.body.classList.add('search-active');
          // Clear previous results
          webResults.innerHTML = '';

          // Always show the header
          const header = document.createElement('div');
          header.className = 'panel-header';
          header.innerHTML = '<h2>Web Search Results</h2>';
          webResults.appendChild(header);

          // Show web results if present
          if (results.results?.length > 0) {
            const resultsList = document.createElement('div');
            resultsList.className = 'search-results-list';
            results.results.forEach((result, index) => {
              console.log(`🔍 DEBUG - Processing result ${index}:`, result);
              console.log(`🔍 DEBUG - Checking imageResults[${index}]:`, results.imageResults?.[index]);
              
              const resultDiv = document.createElement('div');
              resultDiv.className = 'search-result card';
              
              // Add image if available from imageResults
              let imageHtml = '';
              if (results.imageResults && results.imageResults[index]) {
                const imageResult = results.imageResults[index];
                const imageSrc = imageResult.src?.thumbnail || imageResult.src?.medium || imageResult.src?.original || imageResult.thumbnail || imageResult.image || '';
                if (imageSrc) {
                  console.log(`🔍 DEBUG - Using image for result ${index}:`, imageSrc);
                  imageHtml = `<div class="search-result-image"><img src="${imageSrc}" alt="Result image" style="width: 100%; height: 120px; object-fit: cover; border-radius: 8px;"></div>`;
                } else if (result.href) {
                  console.log(`🔍 DEBUG - Using favicon for result ${index}`);
                  try {
                    const url = new URL(result.href);
                    const domain = url.hostname;
                    const favicon = `https://www.google.com/s2/favicons?domain=${domain}&sz=64`;
                    imageHtml = `<div class="search-result-image"><img src="${favicon}" alt="Favicon" style="width: 32px; height: 32px; object-fit: contain;"></div>`;
                  } catch (e) {
                    // fallback: no image
                  }
                }
              } else if (result.href) {
                console.log(`🔍 DEBUG - Using favicon for result ${index}`);
                try {
                  const url = new URL(result.href);
                  const domain = url.hostname;
                  const favicon = `https://www.google.com/s2/favicons?domain=${domain}&sz=64`;
                  imageHtml = `<div class="search-result-image"><img src="${favicon}" alt="Favicon" style="width: 32px; height: 32px; object-fit: contain;"></div>`;
                } catch (e) {
                  // fallback: no image
                }
              }
              
              const resultContent = `
                <div class="search-result-content">
                  <div class="result-title">
                    <a href="${result.href}" target="_blank" rel="noopener noreferrer">${result.title}</a>
                  </div>
                  <div class="result-snippet">${result.body}</div>
                  <div class="result-url">${result.href}</div>
                </div>
              `;

              resultDiv.innerHTML = `
                  ${imageHtml}
                ${resultContent}
              `;
              
              // Make the entire card clickable
              resultDiv.addEventListener('click', function(e) {
                // Don't trigger if clicking on a link (to avoid double navigation)
                if (e.target.tagName === 'A') return;
                window.open(result.href, '_blank');
              });

              resultsList.appendChild(resultDiv);
            });

            webResults.appendChild(resultsList);
            }
          }

        // Add toggle logic for custom panel
        if (customPanelToggle) {
          customPanelToggle.addEventListener('click', () => {
            const isOpen = customPanel.classList.toggle('open');
            document.body.classList.toggle('custom-panel-open', isOpen);
            // Optionally, change the icon
            if (customPanelToggleIcon) {
              if (isOpen) {
                customPanelToggleIcon.classList.remove('fa-bars');
                customPanelToggleIcon.classList.add('fa-xmark');
                customPanelToggleIcon.setAttribute('aria-label', 'Close panel');
              } else {
                customPanelToggleIcon.classList.remove('fa-xmark');
                customPanelToggleIcon.classList.add('fa-bars');
                customPanelToggleIcon.setAttribute('aria-label', 'Open panel');
              }
            }
          });
        }

        // Helper to render web results tab (only cards, no grouped images)
        function renderWebResultsTab() {
          customPanelTabContent.innerHTML = '';
          if (window.lastWebSearchData && window.lastWebSearchData.webResults && window.lastWebSearchData.webResults.length > 0) {
            const webCardsHtml = renderStructuredWebResults({
              organic_results: window.lastWebSearchData.webResults.map((result, idx) => {
                const imageResult = window.lastWebSearchData.imageResults && window.lastWebSearchData.imageResults[idx];
                let imageUrl = null;
                if (imageResult) {
                  imageUrl = imageResult.src?.thumbnail || imageResult.src?.medium || imageResult.src?.original || imageResult.thumbnail || imageResult.image || null;
                }
                // Map backend fields to frontend expected fields
                return {
                  title: result.title,
                  link: result.href, // map 'href' to 'link'
                  snippet: result.body, // map 'body' to 'snippet'
                  image: imageUrl
                };
              }),
              image_results: window.lastWebSearchData.imageResults || []
            });
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = webCardsHtml;
            // Animate cards in sequence (or just show them)
            const cards = tempDiv.querySelectorAll('.search-result.card');
            cards.forEach((card, i) => {
              setTimeout(() => {
                card.classList.add('slide-in-right');
                card.style.opacity = '';
              }, i * 120);
            });
            tempDiv.childNodes.forEach(node => customPanelTabContent.appendChild(node));
          }
        }
        // Helper to render analysis tab
        function renderAnalysisTab() {
          if (window.lastWebSearchData && window.lastWebSearchData.needsAnalysis && window.lastWebSearchData.analysisResponse) {
            // Render structured analysis response
            const analysis = window.lastWebSearchData.analysisResponse;
            let html = '<div class="analysis-container">';
            
            // Summary section
            if (analysis.summary) {
              html += `
                <div class="analysis-summary">
                  <h3><i class="fa-solid fa-clipboard-list" style="margin-right:0.5em;"></i>Analysis Summary</h3>
                  <p>${analysis.summary}</p>
                  ${analysis.keyPoints && analysis.keyPoints.length > 0 ? `
                    <div class="key-points">
                      <h4><i class="fa-solid fa-key" style="margin-right:0.4em;"></i>Key Points</h4>
                      <ul>
                        ${analysis.keyPoints.map(point => `<li>${point}</li>`).join('')}
                      </ul>
                    </div>
                  ` : ''}
                </div>
              `;
            }
            
            // Tasks section
            if (analysis.tasks && analysis.tasks.length > 0) {
              html += `
                <div class="tasks-section">
                  <h3><i class="fa-solid fa-list-check" style="margin-right:0.5em;"></i>Action Items</h3>
                  ${analysis.tasks.map(task => `
                    <div class="task-card">
                      <div class="task-status ${task.status || 'pending'}"></div>
                      <div class="task-header">
                        <h4 class="task-title">${task.title}</h4>
                        <span class="task-priority ${task.priority || 'medium'}">${task.priority || 'medium'}</span>
                      </div>
                      <p class="task-description">${task.description}</p>
                      <div class="task-meta">
                        ${task.estimatedTime ? `
                          <div class="task-time">
                            <i class="fas fa-clock"></i>
                            <span>${task.estimatedTime}</span>
                          </div>
                        ` : ''}
                        ${task.resources && task.resources.length > 0 ? `
                          <div class="task-resources">
                            ${task.resources.map(resource => `<span class="task-resource">${resource}</span>`).join('')}
                          </div>
                        ` : ''}
                      </div>
                    </div>
                  `).join('')}
                </div>
              `;
            }
            
            // Recommendations section
            if (analysis.recommendations && analysis.recommendations.length > 0) {
              html += `
                <div class="recommendations-section">
                  <h3><i class="fa-solid fa-lightbulb" style="margin-right:0.5em;"></i>Recommendations</h3>
                  ${analysis.recommendations.map(rec => `
                    <div class="recommendation-item">
                      <p>${rec}</p>
                    </div>
                  `).join('')}
                </div>
              `;
            }
            
            // Context section
            if (analysis.context) {
              html += `
                <div class="context-section">
                  <h3><i class="fa-solid fa-globe" style="margin-right:0.5em;"></i>Context & Background</h3>
                  ${analysis.context.background ? `
                    <div class="context-item">
                      <h4>Background</h4>
                      <p>${analysis.context.background}</p>
                    </div>
                  ` : ''}
                  ${analysis.context.currentTrends ? `
                    <div class="context-item">
                      <h4>Current Trends</h4>
                      <p>${analysis.context.currentTrends}</p>
                    </div>
                  ` : ''}
                  ${analysis.context.challenges && analysis.context.challenges.length > 0 ? `
                    <div class="context-item">
                      <h4>Challenges</h4>
                      <div class="context-challenges">
                        <ul>
                          ${analysis.context.challenges.map(challenge => `<li>${challenge}</li>`).join('')}
                        </ul>
                      </div>
                    </div>
                  ` : ''}
                </div>
              `;
            }
            
            html += '</div>';
            customPanelTabContent.innerHTML = html;
          } else if (window.lastWebSearchData && window.lastWebSearchData.llmResponse) {
            // Fallback to regular LLM response
            customPanelTabContent.innerHTML = `<div style='color:#fff;text-align:left;padding:2rem 0 0 0;font-size:1.08rem;'>${parseMarkdown(window.lastWebSearchData.llmResponse)}</div>`;
          } else if (window.lastWebSearchData && !window.lastWebSearchData.needsAnalysis) {
            customPanelTabContent.innerHTML = '<div style="color:#aaa;text-align:center;padding:2rem;font-size:1.2rem;">Deep analysis not needed for this query. The response is optimized for your specific question.</div>';
          } else {
            customPanelTabContent.innerHTML = '<div style="color:#aaa;text-align:center;padding:2rem;font-size:1.2rem;">Analysis not available.</div>';
          }
        }

        // Helper to render deep answer tab
        function renderDeepAnswerTab() {
          if (window.lastWebSearchData && window.lastWebSearchData.llmResponse) {
            customPanelTabContent.innerHTML = `<div style='color:#fff;text-align:left;padding:2rem 0 0 0;font-size:1.08rem;'>${parseMarkdown(window.lastWebSearchData.llmResponse)}</div>`;
          } else {
            customPanelTabContent.innerHTML = '<div style="color:#aaa;text-align:center;padding:2rem;font-size:1.2rem;">Deep answer not available.</div>';
          }
        }
        // Store last web search data for tab switching
        window.lastWebSearchData = {};
        // Patch: store data for tab switching
        const origFetch = window.fetch;
        window.fetch = async function(...args) {
          const resp = await origFetch.apply(this, args);
          if (args[0] === '/test/search') {
            try {
              const clone = resp.clone();
              const data = await clone.json();
              window.lastWebSearchData = data;
            } catch (e) {}
          }
          return resp;
        };

        // Download Slides functionality for test page
        function addDownloadButtonToMessage(messageElement, query, data) {
          // Only add download button if there are both analysis and web results
          if (data && ((data.webResults && data.webResults.length > 0) || (data.imageResults && data.imageResults.length > 0))) {
            const downloadSection = document.createElement('div');
            downloadSection.className = 'download-section';
            downloadSection.style.cssText = `
              margin-top: 1.5rem;
              padding: 1.5rem;
              background: linear-gradient(135deg, #2d2d2d 0%, #1a1a1a 100%);
              border-radius: 12px;
              border: 1px solid #444;
              text-align: center;
              box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            `;
            
            const downloadBtn = document.createElement('button');
            downloadBtn.id = 'downloadSlidesBtn';
            downloadBtn.className = 'download-slides-btn';
            downloadBtn.style.cssText = `
              background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);
              color: white;
              border: none;
              padding: 1rem 2rem;
              border-radius: 8px;
              font-size: 1rem;
              font-weight: 600;
              cursor: pointer;
              transition: all 0.3s ease;
              display: inline-flex;
              align-items: center;
              gap: 0.5rem;
              box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
              position: relative;
              overflow: hidden;
            `;
            downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download Slides';
            
            const downloadInfo = document.createElement('div');
            downloadInfo.className = 'download-info';
            downloadInfo.style.cssText = `
              margin-top: 0.75rem;
              color: #a0a0a0;
              font-size: 0.875rem;
              line-height: 1.4;
            `;
            downloadInfo.innerHTML = '<small>Creates beautiful slides with analysis, web results, and images</small>';
            
            downloadSection.appendChild(downloadBtn);
            downloadSection.appendChild(downloadInfo);
            messageElement.appendChild(downloadSection);
            
            // Add click handler
            downloadBtn.addEventListener('click', async function() {
              // Add loading state
              this.classList.add('loading');
              this.innerHTML = '<i class="fas fa-spinner"></i> Generating Slides...';
              
              try {
                // Prepare the data to send
                const slideData = {
                  query: query,
                  analysis: {
                    summary: data.llmResponse || 'Analysis based on web search results',
                    keyPoints: data.analysisResponse?.keyPoints || [],
                    analysis: {
                      contentQuality: 'Based on web search results',
                      credibility: 'Multiple sources analyzed',
                      relevance: 'Directly related to query',
                      insights: 'Comprehensive analysis provided'
                    }
                  },
                  searchResults: (data.webResults || []).map(result => ({
                    title: result.title,
                    snippet: result.body || result.snippet,
                    link: result.href || result.link,
                    displayed_link: result.href || result.link
                  })),
                  images: data.imageResults || [],
                  timestamp: new Date().toISOString()
                };

                // Send request to generate slides
                const response = await fetch('/download-slides', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify(slideData)
                });

                if (response.ok) {
                  // Create download link
                  const blob = await response.blob();
                  const url = window.URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = `slides_${query.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().split('T')[0]}.html`;
                  document.body.appendChild(a);
                  a.click();
                  window.URL.revokeObjectURL(url);
                  document.body.removeChild(a);
                  
                  // Show success message
                  this.innerHTML = '<i class="fas fa-check"></i> Slides Downloaded!';
                  setTimeout(() => {
                    this.innerHTML = '<i class="fas fa-download"></i> Download Slides';
                    this.classList.remove('loading');
                  }, 2000);
                } else {
                  throw new Error('Failed to generate slides');
                }
              } catch (error) {
                console.error('Error downloading slides:', error);
                this.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Download Failed';
                setTimeout(() => {
                  this.innerHTML = '<i class="fas fa-download"></i> Download Slides';
                  this.classList.remove('loading');
                }, 2000);
              }
            });
          }
        }

        // Modify the assistant message creation to include download button
        const originalCreateElement = document.createElement;
        document.createElement = function(tagName) {
          const element = originalCreateElement.call(this, tagName);
          if (tagName === 'div' && element.className === 'message assistant') {
            // This is an assistant message, we'll add download button after content is set
            const originalInnerHTML = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML');
            Object.defineProperty(element, 'innerHTML', {
              set: function(value) {
                originalInnerHTML.set.call(this, value);
                // Add download button after content is set
                if (window.lastWebSearchData && window.lastQuery) {
                  setTimeout(() => {
                    addDownloadButtonToMessage(this, window.lastQuery, window.lastWebSearchData);
                  }, 100);
                }
              },
              get: originalInnerHTML.get
            });
          }
          return element;
        };
      });
    </script>
  </body>
</html>