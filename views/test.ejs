<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Assistant Chat</title>
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="/typewriter.css">
    <script src="/js/results-tabs.js" defer></script>
    <style>
        :root {
            --background-dark: #1a1a1a;
            --surface-dark: #2d2d2d;
            --text-light: #e0e0e0;
            --text-dark: #a0a0a0;
            --accent-blue: #2196f3;
            --accent-dark: #1976d2;
            --message-user: #343435;
            --message-assistant: #2d2d2d;
        }

        /* Hide scrollbar for Webkit browsers (Chrome, Safari, etc.) */
        .messages-container::-webkit-scrollbar,
        .web-results::-webkit-scrollbar,
        .chat-panel::-webkit-scrollbar {
            display: none;
        }

        /* Hide scrollbar for Firefox */
        .messages-container,
        .web-results,
        .chat-panel {
            scrollbar-width: none;
            -ms-overflow-style: none;  /* For Internet Explorer and Edge */
        }

        body {
            background-color: var(--background-dark);
            color: var(--text-light);
            margin: 0;
            padding: 0;
        }

        /* Panel states */
        .web-panel {
            width: 0;
            flex-shrink: 0;
            height: 100%;
            display: flex;
            flex-direction: column;
            background-color: #383638;
            border-left: 1px solid var(--border-color);
            transition: width 0.3s ease;
            overflow: hidden;
        }

        /* Panel state when search results exist */
        body.has-search-results .web-panel {
            width: 40%;
            overflow-y: auto;
        }

        /* Chat panel state */
        .chat-panel {
            flex: 1;
            width: 100%;
            transition: all 0.3s ease;
        }

        body.has-search-results .chat-panel {
            width: 60%;
        }

        .panel-container {
            display: flex;
            width: 100%;
            height: 100vh;
            position: relative;
            overflow: hidden;
        }

        .chat-panel {
            flex: 1;
            min-width: 40%;
            height: 100%;
            overflow-y: auto;
            padding: 20px;
            box-sizing: border-box;
            transition: min-width 0.3s ease;
        }

        .results-tabs {
            display: flex;
            gap: 1rem;
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            background-color: var(--surface-dark);
        }

        .tab {
            padding: 0.5rem 1rem;
            color: var(--text-light);
            background: transparent;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .tab.active {
            background: var(--accent-blue);
            color: white;
        }

        .tab:hover:not(.active) {
            background: rgba(255, 255, 255, 0.1);
        }

        .messages-container {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px;
            overflow-x: hidden;
            scroll-behavior: smooth;
        }

        .input-container {
            padding: 20px;
            background: var(--surface-dark);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        /* Message styling */
        .message {
            margin-bottom: 16px;
            padding: 12px 16px;
            border-radius: 12px;
            max-width: 85%;
            font-size: 15px;
            line-height: 1.5;
        }

        .message.user {
            background: var(--message-user);
            margin-left: auto;
            color: white;
            border-bottom-right-radius: 4px;
        }

        .message.assistant {
            background: var(--message-assistant);
            margin-right: auto;
            border-bottom-left-radius: 4px;
        }

        /* Natural-looking lists in messages */
        .message ul, .message ol {
            margin: 8px 0;
            padding-left: 20px;
        }

        .message li {
            margin: 4px 0;
        }

        .message p {
            margin: 8px 0;
        }

        .message h2, .message h3 {
            margin: 16px 0 8px 0;
            font-weight: 600;
        }

        /* Links in messages */
        .message a {
            color: var(--accent-blue);
            text-decoration: none;
        }

        .message a:hover {
            text-decoration: underline;
        }

        .loading {
            display: inline-block;
            margin-left: 10px;
        }

        .loading span {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--accent-blue);
            margin: 0 2px;
            animation: bounce 0.6s infinite alternate;
        }

        .loading span:nth-child(2) { animation-delay: 0.2s; }
        .loading span:nth-child(3) { animation-delay: 0.4s; }

        @keyframes bounce {
            to { transform: translateY(-4px); }
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .message.loading {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .loading-dots {
            display: flex;
            gap: 4px;
        }

        .loading-dots span {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--accent-blue);
            animation: pulse 1s infinite;
        }

        .loading-dots span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .loading-dots span:nth-child(3) {
            animation-delay: 0.4s;
        }

        .web-results {
            flex: 1;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 2rem;
            overflow-y: auto;
            overflow-x: hidden;
        }

        .search-result {
            display: flex;
            gap: 1.5rem;
            padding: 1.5rem;
            border-radius: 12px;
            background: var(--surface-dark);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }

        .search-result:hover {
            transform: translateY(-2px);
            border-color: var(--accent-blue);
        }

        .search-result-image {
            flex-shrink: 0;
            width: 180px;
            height: 180px;
            border-radius: 8px;
            overflow: hidden;
        }

        .search-result-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .search-result:hover .search-result-image img {
            transform: scale(1.05);
        }

        .search-result-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .result-title {
            margin: 0 0 0.75rem 0;
        }

        .result-title a {
            color: var(--accent-blue);
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 500;
            line-height: 1.4;
        }

        .result-title a:hover {
            text-decoration: underline;
        }

        .result-snippet {
            color: var(--text-dark);
            margin: 0.5rem 0;
            line-height: 1.5;
            font-size: 0.95rem;
        }

        .result-url {
            color: var(--text-dark);
            font-size: 0.85rem;
            margin-top: auto;
            opacity: 0.8;
        }

        .image-results {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 1rem;
            padding: 1.5rem;
            overflow-y: auto;
        }

        .image-result {
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.3s ease;
            aspect-ratio: 1;
        }

        .image-result:hover {
            transform: scale(1.05);
        }

        .image-result img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }
    </style>
</head>
<body>
    <div class="panel-container">
        <!-- Chat Panel -->
        <div class="chat-panel">
            <div class="panel-header">
                <h2>Chat Assistant</h2>
            </div>
            <div class="messages-container">
                <% if (results && results.length > 0) { %>
                    <% results.forEach(result => { %>
                        <div class="message <%= result.role %>">
                            <%= result.content %>
                        </div>
                    <% }) %>
                <% } %>
            </div>
            <div class="input-container">
                <form id="chatForm" class="chat-form">
                    <div class="input-group">
                        <input type="text" id="queryInput" placeholder="Type your message..." required>
                        <button type="submit">Send</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Web Results Panel -->
        <div class="web-panel">
            <div class="panel-header">
                <h2>Search Results</h2>
            </div>
            <div id="web-results" class="web-results">
                <!-- Combined results will be loaded here -->
            </div>
        </div>
    </div><!-- End of panel-container -->

    <script>
        // Simple markdown parser for the client side
        function parseMarkdown(text) {
            // First, normalize line endings and remove excess whitespace
            text = text.replace(/\r\n/g, '\n')
                      .replace(/\n{3,}/g, '\n\n')
                      .trim();

            return text
                // Headers with proper spacing
                .replace(/^## (.*$)/gm, '<h2>$1</h2>\n')
                .replace(/^### (.*$)/gm, '<h3>$1</h3>\n')
                // Bold
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                // Italic
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                // Bullet lists with proper spacing
                .replace(/^\s*[\-\*]\s(.+)/gm, '<li>$1</li>')
                .replace(/(<li>.*<\/li>\n?)+/g, '<ul>$&</ul>\n')
                // Numbered lists with proper spacing
                .replace(/^\d+\.\s(.+)/gm, '<li>$1</li>')
                .replace(/(<li>.*<\/li>\n?)+/g, '<ol>$&</ol>\n')
                // Paragraphs with proper spacing
                .replace(/\n\n/g, '</p><p>')
                // Preserve line breaks within paragraphs
                .replace(/\n/g, '<br>')
                // Ensure content is wrapped in a paragraph
                .replace(/^(.+?)(?=<\/p>|$)/, '<p>$1')
                .replace(/(?<=<\/p>)(.+?)$/, '<p>$1</p>');
        }

        document.addEventListener('DOMContentLoaded', () => {
            const chatForm = document.getElementById('chatForm');
            const queryInput = document.getElementById('queryInput');
            const messagesContainer = document.querySelector('.messages-container');
            const webResults = document.getElementById('web-results');
            const imageResults = document.getElementById('image-results');
            const webPanel = document.querySelector('.web-panel');

            chatForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const query = queryInput.value.trim();
                if (!query) return;

                // Add user message
                const userMessage = document.createElement('div');
                userMessage.className = 'message user';
                userMessage.textContent = query;
                messagesContainer.appendChild(userMessage);

                // Clear input
                queryInput.value = '';

                try {
                    const response = await fetch('/analyze', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ query })
                    });

                    const data = await response.json();

                    // Handle web panel visibility based on response type
                    if (data.isConversational) {
                        document.body.classList.remove('has-search-results');
                    } else {
                        // Update web panel content and visibility
                        if (data.serpResults && (data.serpResults.organic_results?.length > 0 || data.serpResults.image_results?.length > 0)) {
                            document.body.classList.add('has-search-results');
                            updateSearchResults(data.serpResults);
                        } else {
                            document.body.classList.remove('has-search-results');
                        }
                    }

                    // Add assistant message with markdown parsing
                    if (data.structuredAnswer) {
                        data.structuredAnswer.forEach(answer => {
                            const assistantMessage = document.createElement('div');
                            assistantMessage.className = 'message assistant';
                            
                            const content = typeof answer === 'string' ? answer : 
                                          answer.text ? answer.text : 
                                          JSON.stringify(answer);
                            
                            const typingDiv = document.createElement('div');
                            typingDiv.className = 'typing typewriter';
                            assistantMessage.appendChild(typingDiv);
                            messagesContainer.appendChild(assistantMessage);
                            
                            // Improved typewriter effect
                            const words = content.split(' ');
                            let currentText = '';
                            let wordIndex = 0;
                            
                            function typeWord() {
                                if (wordIndex < words.length) {
                                    currentText += (wordIndex > 0 ? ' ' : '') + words[wordIndex];
                                    typingDiv.innerHTML = parseMarkdown(currentText);
                                    wordIndex++;
                                    const delay = Math.random() * 50 + 30; // Random delay between words
                                    setTimeout(typeWord, delay);
                                }
                                // Scroll while typing
                                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                            }
                            typeWord();
                        });
                    }

                    // Scroll chat to bottom
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;

                } catch (error) {
                    console.error('Error:', error);
                    const errorMessage = document.createElement('div');
                    errorMessage.className = 'message assistant error';
                    errorMessage.textContent = 'Sorry, there was an error processing your request.';
                    messagesContainer.appendChild(errorMessage);
                    document.body.classList.remove('has-search-results');
                }
            });

            function updateSearchResults(results) {
                // Clear previous results
                webResults.innerHTML = '';

                // Combine image and web results
                if (results.organic_results?.length > 0) {
                    webResults.innerHTML = results.organic_results
                        .map((result, index) => {
                            const image = results.image_results?.[index];
                            return `
                                <div class="search-result">
                                    ${image ? `
                                    <div class="search-result-image">
                                        <a href="${image.link}" target="_blank" rel="noopener noreferrer">
                                            <img src="${image.thumbnail}" alt="${image.title}" loading="lazy">
                                        </a>
                                    </div>
                                    ` : ''}
                                    <div class="search-result-content">
                                        <h3 class="result-title">
                                            <a href="${result.link}" target="_blank" rel="noopener noreferrer">
                                                ${result.title}
                                            </a>
                                        </h3>
                                        <p class="result-snippet">${result.snippet || ''}</p>
                                        <div class="result-url">${result.displayed_link || result.link}</div>
                                    </div>
                                </div>
                            `;
                        })
                        .join('');
                }
            }
        });
    </script>
</body>
</html>
