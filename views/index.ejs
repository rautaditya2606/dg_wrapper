<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Analysis</title>
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="/typewriter.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <script src="/js/results-tabs.js" defer></script>
</head>

<body class="<%= result ? 'search-active' : '' %>">
    <div class="container">
        <!-- Initial State (Welcome Screen) -->
        <div class="initial-state">
            <div class="welcome-circle"></div>
            <h1>Search Analysis</h1>
            <p>Enter your query to get comprehensive analysis and insights</p>
            <div class="pulse-circles">
                <div class="pulse-circle"></div>
                <div class="pulse-circle"></div>
                <div class="pulse-circle"></div>
            </div>
        </div>

        <main class="main-content">
            <!-- Chat Panel -->
            <div class="chat-panel">
                <!-- Left Panel -->
                <div class="panel left-panel">
                <div class="greeting-box">
                    <p><%= query %></p>
                </div>
                <% if(result) { %>
                    <!-- <div class="panel-header">AI Analysis</div> -->
                    <div class="panel-content">
                        <% if(result && result.analysis) { %>
                            <div class="node-container">
                                <!-- Summary Node -->
                                <div class="node" id="summary-node">
                                    <div class="node-title">Summary Overview</div>
                                    <div class="node-content">
                                        <p><%= result.analysis.summary %></p>
                                    </div>
                                </div>

                                <!-- Key Points Node -->
                                <div class="node" id="keypoints-node">
                                    <div class="node-title">Key Points</div>
                                    <div class="node-content">
                                        <ul class="node-list">
                                            <% result.analysis.keyPoints.forEach(point => { %>
                                                <li><%= point %></li>
                                            <% }); %>
                                        </ul>
                                    </div>
                                </div>

                                <!-- Analysis Node -->
                                <div class="node" id="analysis-node">
                                    <div class="node-title">Detailed Analysis</div>
                                    <div class="node-content">
                                        <p><strong>Content Quality:</strong> <%= result.analysis.analysis.contentQuality %></p>
                                        <p><strong>Source Credibility:</strong> <%= result.analysis.analysis.credibility %></p>
                                        <p><strong>Relevance:</strong> <%= result.analysis.analysis.relevance %></p>
                                        <p><strong>Key Insights:</strong> <%= result.analysis.analysis.insights %></p>
                                    </div>
                                </div>

                                <!-- Context Node -->
                                <% if(result.analysis.context) { %>
                                    <div class="node" id="context-node">
                                        <div class="node-title">Additional Context</div>
                                        <div class="node-content">
                                            <% if(result.analysis.context.background) { %>
                                                <p><strong>Background:</strong> <%= result.analysis.context.background %></p>
                                            <% } %>
                                            <% if(result.analysis.context.relatedTopics && result.analysis.context.relatedTopics.length > 0) { %>
                                                <strong>Related Topics:</strong>
                                                <ul class="node-list">
                                                    <% result.analysis.context.relatedTopics.forEach(topic => { %>
                                                        <li><%= topic %></li>
                                                    <% }); %>
                                                </ul>
                                            <% } %>
                                            <% if(result.analysis.context.misconceptions && result.analysis.context.misconceptions.length > 0) { %>
                                                <strong>Common Misconceptions:</strong>
                                                <ul class="node-list">
                                                    <% result.analysis.context.misconceptions.forEach(misconception => { %>
                                                        <li><%= misconception %></li>
                                                    <% }); %>
                                                </ul>
                                            <% } %>
                                        </div>
                                    </div>
                                <% } %>

                                <!-- Recommendations Node -->
                                <% if(result.analysis.recommendations) { %>
                                    <div class="node" id="recommendations-node">
                                        <div class="node-title">Recommendations</div>
                                        <div class="node-content">
                                            <% if(result.analysis.recommendations.research && result.analysis.recommendations.research.length > 0) { %>
                                                <strong>Further Research:</strong>
                                                <ul class="node-list">
                                                    <% result.analysis.recommendations.research.forEach(area => { %>
                                                        <li><%= area %></li>
                                                    <% }); %>
                                                </ul>
                                            <% } %>
                                            <% if(result.analysis.recommendations.applications && result.analysis.recommendations.applications.length > 0) { %>
                                                <strong>Practical Applications:</strong>
                                                <ul class="node-list">
                                                    <% result.analysis.recommendations.applications.forEach(app => { %>
                                                        <li><%= app %></li>
                                                    <% }); %>
                                                </ul>
                                            <% } %>
                                        </div>
                                    </div>
                                <% } %>
                            </div>

                            <script>
                                document.addEventListener('DOMContentLoaded', () => {
                                    const nodes = document.querySelectorAll('.node');
                                    const typingSpeed = 15; // Milliseconds per character
                                    const nodeStaggerTime = 800; // Milliseconds between each node's animation start

                                    function typeCharacterByCharacter(textNode, textToType) {
                                        // textNode is expected to be a DOM Text Node.
                                        // We will modify its nodeValue.
                                        const originalNodeValue = textNode.nodeValue; // Keep original for reference if needed, though textToType is passed
                                        textNode.nodeValue = ''; // Clear current content for typing effect
                                        
                                        let i = 0;
                                        return new Promise(resolve => {
                                            function addChar() {
                                                if (i < textToType.length) {
                                                    textNode.nodeValue += textToType.charAt(i);
                                                    i++;
                                                    setTimeout(addChar, typingSpeed);
                                                } else {
                                                    resolve();
                                                }
                                            }
                                            addChar();
                                        });
                                    }

                                    // Recursively collects all non-empty text nodes within a given element.
                                    function collectTextNodes(currentElement, textNodesArray) {
                                        Array.from(currentElement.childNodes).forEach(child => {
                                            if (child.nodeType === Node.TEXT_NODE && child.textContent.trim().length > 0) {
                                                textNodesArray.push({ node: child, originalText: child.textContent });
                                            } else if (child.nodeType === Node.ELEMENT_NODE) {
                                                // Avoid recursing into script/style tags or other non-content elements
                                                if (!['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'TEXTAREA', 'SELECT', 'OPTION'].includes(child.tagName.toUpperCase())) {
                                                    collectTextNodes(child, textNodesArray);
                                                }
                                            }
                                        });
                                    }

                                    async function animateNode(node, nodeIndex) {
                                        node.classList.add('active'); // Make node visible (triggers CSS fade-in)
                                        if (nodeIndex < nodes.length - 1) {
                                            node.classList.add('connected'); // Triggers CSS for connector line
                                        }
                                        // Wait a brief moment for CSS transitions to start
                                        await new Promise(resolve => setTimeout(resolve, 100)); 

                                        const textItemsToAnimate = [];
                                        const titleElement = node.querySelector('.node-title');
                                        if (titleElement) {
                                            collectTextNodes(titleElement, textItemsToAnimate);
                                        }
                                        const contentElement = node.querySelector('.node-content');
                                        if (contentElement) {
                                            collectTextNodes(contentElement, textItemsToAnimate);
                                        }

                                        // Animate each collected text node sequentially
                                        for (const item of textItemsToAnimate) {
                                            await typeCharacterByCharacter(item.node, item.originalText);
                                        }
                                    }

                                    // Initialize animation for each node with a stagger
                                    nodes.forEach((node, index) => {
                                        setTimeout(async () => {
                                            await animateNode(node, index);
                                        }, index * nodeStaggerTime);
                                    });
                                });
                            </script>
                            <% } %>
                    </div>
                <% } %>
                </div> <!-- Close left-panel -->
            </div> <!-- Close chat-panel -->

            <!-- Toggle Button -->
            <button class="toggle-panel">◀</button>

            <!-- Web Panel -->
            <div class="web-panel">
                <!-- Terminal Window -->
                <div class="terminal-window">
                    <div class="terminal-bar">
                        <div class="terminal-buttons">
                            <span class="terminal-button close"></span>
                            <span class="terminal-button minimize"></span>
                            <span class="terminal-button maximize"></span>
                        </div>
                    </div>
                    <div class="terminal-content" id="terminal-content">
                        <div class="terminal-line">$ Initializing search environment...</div>
                        <div class="terminal-line">$ SerpAPI status: ready</div>
                        <div class="terminal-line">$ System initialized and ready for queries</div>
                        <div class="terminal-line status-line"></div>
                        <div class="terminal-line blink">_</div>
                    </div>
                </div>

                <!-- Search Results Container -->
                <% if(result && (result.searchResults || result.images)) { %>
                    <div class="web-results-container">
                        <!-- Results Tabs -->
                        <div class="results-tabs">
                            <button class="tab active" data-tab="web">
                                <i class="fas fa-globe"></i>
                                Web Results
                                <% if(result.searchResults && result.searchResults.length > 0) { %>
                                    <span class="tab-count"><%= result.searchResults.length %></span>
                                <% } %>
                            </button>
                            <button class="tab" data-tab="images">
                                <i class="fas fa-images"></i>
                                Images
                                <% if(result.images && result.images.length > 0) { %>
                                    <span class="tab-count"><%= result.images.length %></span>
                                <% } %>
                            </button>
                        </div>
                        
                        <!-- Web Results Section -->
                        <div class="results-section" id="web-results">
                            <% if(result.searchResults && result.searchResults.length > 0) { %>
                                <div class="results-header">
                                    <h3>Web Search Results</h3>
                                    <p>Found <%= result.searchResults.length %> results for "<%= query %>"</p>
                                </div>
                                <div class="search-results-list">
                                    <% result.searchResults.forEach((result, index) => { %>
                                        <div class="search-result-item">
                                            <div class="result-number"><%= index + 1 %></div>
                                            <div class="result-content">
                                                <h4 class="result-title">
                                                    <a href="<%= result.link %>" target="_blank" rel="noopener noreferrer">
                                                        <%= result.title %>
                                                    </a>
                                                </h4>
                                                <p class="result-snippet"><%= result.snippet %></p>
                                                <div class="result-meta">
                                                    <span class="result-url"><%= result.displayed_link || result.link %></span>
                                                    <% if(result.date) { %>
                                                        <span class="result-date"><%= result.date %></span>
                                                    <% } %>
                                                </div>
                                            </div>
                                        </div>
                                    <% }); %>
                                </div>
                            <% } else { %>
                                <div class="no-results">
                                    <i class="fas fa-search"></i>
                                    <p>No web results found</p>
                                </div>
                            <% } %>
                        </div>
                        
                        <!-- Image Results Section -->
                        <div class="results-section" id="image-results" style="display: none;">
                            <% if(result.images && result.images.length > 0) { %>
                                <div class="results-header">
                                    <h3>Image Search Results</h3>
                                    <p>Found <%= result.images.length %> images for "<%= query %>"</p>
                                </div>
                                <div class="image-grid">
                                    <% result.images.forEach((image, index) => { %>
                                        <div class="image-result-item">
                                            <a href="<%= image.link %>" target="_blank" rel="noopener noreferrer" class="image-link">
                                                <img src="<%= image.thumbnail %>" alt="<%= image.title %>" loading="lazy">
                                                <div class="image-overlay">
                                                    <span class="image-title"><%= image.title %></span>
                                                </div>
                                            </a>
                                        </div>
                                    <% }); %>
                                </div>
                            <% } else { %>
                                <div class="no-results">
                                    <i class="fas fa-images"></i>
                                    <p>No images found</p>
                                </div>
                            <% } %>
                        </div>
                    </div>
                <% } else { %>
                    <div class="web-panel-placeholder">
                        <div class="placeholder-content">
                            <i class="fas fa-search"></i>
                            <h3>Search Results</h3>
                            <p>Web search results will appear here when you perform a search.</p>
                        </div>
                    </div>
                <% } %>
            </div>
        </main>

        <form id="chatForm" class="chat-form">
            <div class="input-group">
                <input type="text" id="queryInput" placeholder="Type your message..." required>
                <button type="submit">Send</button>
            </div>
        </form>

        <script>
            function startImageSequence() {
                const slides = document.querySelectorAll('.image-slide');
                const totalSlides = slides.length;
                let currentSlide = 0;

                function showNextImage() {
                    slides[currentSlide].classList.add('fade-out');

                    setTimeout(() => {
                        slides[currentSlide].style.display = 'none';
                        currentSlide = (currentSlide + 1) % totalSlides;

                        if (currentSlide === 0) {
                            // Show full results after all images
                            document.getElementById('sequential-images').classList.add('fade-out');
                            setTimeout(() => {
                                document.getElementById('sequential-images').style.display = 'none';
                                document.getElementById('full-results').classList.remove('hidden');
                                document.getElementById('full-results').classList.add('fade-in');
                            }, 500);
                        } else {
                            // Show next image
                            slides[currentSlide].style.display = 'block';
                            slides[currentSlide].classList.remove('fade-out');
                            slides[currentSlide].classList.add('fade-in');
                            setTimeout(showNextImage, 1500);
                        }
                    }, 500);
                }

                setTimeout(showNextImage, 1500);
            }

            window.onload = startImageSequence;

            // Handle form submission and show terminal
            document.querySelector('form').addEventListener('submit', function(e) {
                e.preventDefault();
                const terminal = document.getElementById('terminal-content');
                const query = this.querySelector('input[name="query"]').value;
                
                // Add loading class to show terminal
                document.body.classList.add('loading');
                
                // Clear previous terminal content
                terminal.innerHTML = '';
                
                // Add terminal messages
                addTerminalLine(`$ Processing query: "${query}"`);
                addTerminalLine('$ Initiating search pipeline...');
                
                // Show stages with timing
                setTimeout(() => addTerminalLine('$ [1/4] Connecting to SerpAPI...'), 500);
                setTimeout(() => addTerminalLine('$ [2/4] Fetching search results and images...'), 1500);
                setTimeout(() => addTerminalLine('$ [3/4] Processing data with OpenAI...'), 3000);
                setTimeout(() => addTerminalLine('$ [4/4] Formatting response...'), 4000);
                
                // Add blinking cursor
                setTimeout(() => addTerminalLine('_', true), 4100);
                
                // Submit the form
                document.body.classList.add('search-active');
                this.submit();
            });

            function addTerminalLine(text, isCursor = false) {
                const terminal = document.getElementById('terminal-content');
                const line = document.createElement('div');
                line.className = 'terminal-line' + (isCursor ? ' blink' : '');
                line.textContent = text;
                terminal.appendChild(line);
                terminal.scrollTop = terminal.scrollHeight;
            }
        </script>
    </div>

    <script src="/js/panelToggle.js"></script>
</body>

</html>