<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Analysis</title>
    <link rel="stylesheet" href="/style.css">
</head>

<body class="<%= result ? 'search-active' : '' %>">
    <div class="container">
        <main class="panels-container">
            <!-- Left Panel -->
            <div class="panel left-panel">
                <% if(!result) { %>
                    <div class="greeting-box">
                        <h1>Welcome to AI Search Analysis</h1>
                        <p>Enter your query below to get detailed analysis and search results powered by AI.</p>
                        <p>I'll help you understand and analyze web content comprehensively.</p>
                    </div>
                    <% } else { %>
                        <div class="panel-header">AI Analysis</div>
                        <div class="panel-content">
                            <% if(result && result.analysis) { %>
                                <div class="node-container">
                                    <!-- Summary Node -->
                                    <div class="node" id="summary-node">
                                        <div class="node-title">Summary Overview</div>
                                        <div class="node-content">
                                            <p><%= result.analysis.summary %></p>
                                        </div>
                                    </div>

                                    <!-- Key Points Node -->
                                    <div class="node" id="keypoints-node">
                                        <div class="node-title">Key Points</div>
                                        <div class="node-content">
                                            <ul class="node-list">
                                                <% result.analysis.keyPoints.forEach(point => { %>
                                                    <li><%= point %></li>
                                                <% }); %>
                                            </ul>
                                        </div>
                                    </div>

                                    <!-- Analysis Node -->
                                    <div class="node" id="analysis-node">
                                        <div class="node-title">Detailed Analysis</div>
                                        <div class="node-content">
                                            <p><strong>Content Quality:</strong> <%= result.analysis.analysis.contentQuality %></p>
                                            <p><strong>Source Credibility:</strong> <%= result.analysis.analysis.credibility %></p>
                                            <p><strong>Relevance:</strong> <%= result.analysis.analysis.relevance %></p>
                                            <p><strong>Key Insights:</strong> <%= result.analysis.analysis.insights %></p>
                                        </div>
                                    </div>

                                    <!-- Context Node -->
                                    <div class="node" id="context-node">
                                        <div class="node-title">Additional Context</div>
                                        <div class="node-content">
                                            <p><strong>Background:</strong> <%= result.analysis.context.background %></p>
                                            <strong>Related Topics:</strong>
                                            <ul class="node-list">
                                                <% result.analysis.context.relatedTopics.forEach(topic => { %>
                                                    <li><%= topic %></li>
                                                <% }); %>
                                            </ul>
                                            <strong>Common Misconceptions:</strong>
                                            <ul class="node-list">
                                                <% result.analysis.context.misconceptions.forEach(misconception => { %>
                                                    <li><%= misconception %></li>
                                                <% }); %>
                                            </ul>
                                        </div>
                                    </div>

                                    <!-- Recommendations Node -->
                                    <div class="node" id="recommendations-node">
                                        <div class="node-title">Recommendations</div>
                                        <div class="node-content">
                                            <strong>Further Research:</strong>
                                            <ul class="node-list">
                                                <% result.analysis.recommendations.research.forEach(area => { %>
                                                    <li><%= area %></li>
                                                <% }); %>
                                            </ul>
                                            <strong>Practical Applications:</strong>
                                            <ul class="node-list">
                                                <% result.analysis.recommendations.applications.forEach(app => { %>
                                                    <li><%= app %></li>
                                                <% }); %>
                                            </ul>
                                        </div>
                                    </div>
                                </div>

                                <script>
                                    document.addEventListener('DOMContentLoaded', () => {
                                        const nodes = document.querySelectorAll('.node');
                                        const typingSpeed = 15; // Milliseconds per character
                                        const nodeStaggerTime = 800; // Milliseconds between each node's animation start

                                        function typeCharacterByCharacter(textNode, textToType) {
                                            // textNode is expected to be a DOM Text Node.
                                            // We will modify its nodeValue.
                                            const originalNodeValue = textNode.nodeValue; // Keep original for reference if needed, though textToType is passed
                                            textNode.nodeValue = ''; // Clear current content for typing effect
                                            
                                            let i = 0;
                                            return new Promise(resolve => {
                                                function addChar() {
                                                    if (i < textToType.length) {
                                                        textNode.nodeValue += textToType.charAt(i);
                                                        i++;
                                                        setTimeout(addChar, typingSpeed);
                                                    } else {
                                                        resolve();
                                                    }
                                                }
                                                addChar();
                                            });
                                        }

                                        // Recursively collects all non-empty text nodes within a given element.
                                        function collectTextNodes(currentElement, textNodesArray) {
                                            Array.from(currentElement.childNodes).forEach(child => {
                                                if (child.nodeType === Node.TEXT_NODE && child.textContent.trim().length > 0) {
                                                    textNodesArray.push({ node: child, originalText: child.textContent });
                                                } else if (child.nodeType === Node.ELEMENT_NODE) {
                                                    // Avoid recursing into script/style tags or other non-content elements
                                                    if (!['SCRIPT', 'STYLE', 'BUTTON', 'INPUT', 'TEXTAREA', 'SELECT', 'OPTION'].includes(child.tagName.toUpperCase())) {
                                                        collectTextNodes(child, textNodesArray);
                                                    }
                                                }
                                            });
                                        }

                                        async function animateNode(node, nodeIndex) {
                                            node.classList.add('active'); // Make node visible (triggers CSS fade-in)
                                            if (nodeIndex < nodes.length - 1) {
                                                node.classList.add('connected'); // Triggers CSS for connector line
                                            }
                                            // Wait a brief moment for CSS transitions to start
                                            await new Promise(resolve => setTimeout(resolve, 100)); 

                                            const textItemsToAnimate = [];
                                            const titleElement = node.querySelector('.node-title');
                                            if (titleElement) {
                                                collectTextNodes(titleElement, textItemsToAnimate);
                                            }
                                            const contentElement = node.querySelector('.node-content');
                                            if (contentElement) {
                                                collectTextNodes(contentElement, textItemsToAnimate);
                                            }

                                            // Animate each collected text node sequentially
                                            for (const item of textItemsToAnimate) {
                                                await typeCharacterByCharacter(item.node, item.originalText);
                                            }
                                        }

                                        // Initialize animation for each node with a stagger
                                        nodes.forEach((node, index) => {
                                            setTimeout(async () => {
                                                await animateNode(node, index);
                                            }, index * nodeStaggerTime);
                                        });
                                    });
                                </script>
                                <% } %>
                        </div>
                        <% } %>
            </div>

            <!-- Toggle Button -->
            <button class="toggle-panel">◀</button>

            <!-- Right Panel -->
            <div class="panel right-panel">
                <!-- Terminal Window (Always present, toggled by CSS) -->
                <div class="panel-header">Processing</div>
                <div class="panel-content terminal-window">
                    <div class="terminal-bar">
                        <div class="terminal-buttons">
                            <span class="terminal-button close"></span>
                            <span class="terminal-button minimize"></span>
                            <span class="terminal-button maximize"></span>
                        </div>
                    </div>
                    <div class="terminal-content" id="terminal-content">
                        <div class="terminal-line">$ Initializing search environment...</div>
                        <div class="terminal-line">$ SerpAPI status: ready</div>
                        <div class="terminal-line">$ OpenAI status: ready</div>
                        <div class="terminal-line">$ System initialized and ready for queries</div>
                        <div class="terminal-line status-line"></div>
                        <div class="terminal-line blink">_</div>
                    </div>
                </div>

                <!-- Search Results (Shown when results are ready) -->
                <% if(result) { %>
                    <div class="panel-header">Search Results</div>
                    <div class="panel-content">
                        <% if(result && result.images && result.images.length> 0) { %>
                            <!-- Sequential Image Display -->
                            <div id="sequential-images" class="sequential-container">
                                <% result.images.forEach((image, index)=> { %>
                                    <div class="image-slide" style="display: <%= index === 0 ? 'block' : 'none' %>">
                                        <img src="<%= image.original || image.thumbnail %>" alt="<%= image.title %>">
                                        <div class="image-counter">
                                            <%= index + 1 %> / <%= result.images.length %>
                                        </div>
                                    </div>
                                    <% }) %>
                            </div>

                            <!-- Full Results (Initially Hidden) -->
                            <div id="full-results" class="full-results hidden">
                                <!-- Combined AI Analysis -->
                                <div class="combined-analysis">
                                    <h2>AI Analysis</h2>
                                    <div class="analysis-content">
                                        <% if(result.analysis) { %>
                                            <div class="analysis-section">
                                                <h3>Summary</h3>
                                                <p><%= result.analysis.summary %></p>
                                            </div>
                                            <div class="analysis-section">
                                                <h3>Key Insights</h3>
                                                <ul>
                                                    <% result.analysis.keyPoints.forEach(point => { %>
                                                        <li><%= point %></li>
                                                    <% }); %>
                                                </ul>
                                            </div>
                                            <div class="analysis-section">
                                                <h3>Detailed Analysis</h3>
                                                <p><%= result.analysis.analysis.insights %></p>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>

                                <!-- Web Results -->
                                <div class="search-results">
                                    <h2>Web Results</h2>
                                    <% result.searchResults.forEach(item=> { %>
                                        <div class="search-item">
                                            <h3><a href="<%= item.link %>" target="_blank">
                                                    <%= item.title %>
                                                </a></h3>
                                            <p>
                                                <%= item.snippet %>
                                            </p>
                                        </div>
                                    <% }) %>
                                </div>
                            </div>
                            <% } %>
                    </div>
                <% } %>
        </main>

        <!-- Search Bar -->
        <div class="search-form-container">
            <form action="/search" method="POST">
                <div class="input-group">
                    <input type="text" name="query" placeholder="Enter your query..." required>
                    <button type="submit">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                            <path fill="currentColor"
                                d="M476 3.9c-6.3-3.1-13.6-1.8-18.3 3.2L26.8 236.2c-8.2 4.9-9.3 15.1-2.1 21.1L107 331.3 187 471c5.5 9.1 17.2 10.1 24.2 1.8l84.6-97.2 135.6 82.4c6.6 4 15.2 2.7 20.7-3.3 5.1-5.4 6.2-13.3 2.9-20L476 3.9zM117.9 277l-58.5-32.7 372.9-183.2-222.3 254zm275.3 150.2l-106.7-64.9L436 62.5l-42.8 366.7z" />
                        </svg>
                    </button>
                </div>
            </form>
        </div>

        <script>
            function startImageSequence() {
                const slides = document.querySelectorAll('.image-slide');
                const totalSlides = slides.length;
                let currentSlide = 0;

                function showNextImage() {
                    slides[currentSlide].classList.add('fade-out');

                    setTimeout(() => {
                        slides[currentSlide].style.display = 'none';
                        currentSlide = (currentSlide + 1) % totalSlides;

                        if (currentSlide === 0) {
                            // Show full results after all images
                            document.getElementById('sequential-images').classList.add('fade-out');
                            setTimeout(() => {
                                document.getElementById('sequential-images').style.display = 'none';
                                document.getElementById('full-results').classList.remove('hidden');
                                document.getElementById('full-results').classList.add('fade-in');
                            }, 500);
                        } else {
                            // Show next image
                            slides[currentSlide].style.display = 'block';
                            slides[currentSlide].classList.remove('fade-out');
                            slides[currentSlide].classList.add('fade-in');
                            setTimeout(showNextImage, 1500);
                        }
                    }, 500);
                }

                setTimeout(showNextImage, 1500);
            }

            window.onload = startImageSequence;

            // Handle form submission and show terminal
            document.querySelector('form').addEventListener('submit', function(e) {
                e.preventDefault();
                const terminal = document.getElementById('terminal-content');
                const query = this.querySelector('input[name="query"]').value;
                
                // Add loading class to show terminal
                document.body.classList.add('loading');
                
                // Clear previous terminal content
                terminal.innerHTML = '';
                
                // Add terminal messages
                addTerminalLine(`$ Processing query: "${query}"`);
                addTerminalLine('$ Initiating search pipeline...');
                
                // Show stages with timing
                setTimeout(() => addTerminalLine('$ [1/4] Connecting to SerpAPI...'), 500);
                setTimeout(() => addTerminalLine('$ [2/4] Fetching search results and images...'), 1500);
                setTimeout(() => addTerminalLine('$ [3/4] Processing data with OpenAI...'), 3000);
                setTimeout(() => addTerminalLine('$ [4/4] Formatting response...'), 4000);
                
                // Add blinking cursor
                setTimeout(() => addTerminalLine('_', true), 4100);
                
                // Submit the form
                document.body.classList.add('search-active');
                this.submit();
            });

            function addTerminalLine(text, isCursor = false) {
                const terminal = document.getElementById('terminal-content');
                const line = document.createElement('div');
                line.className = 'terminal-line' + (isCursor ? ' blink' : '');
                line.textContent = text;
                terminal.appendChild(line);
                terminal.scrollTop = terminal.scrollHeight;
            }
        </script>
    </div>

    <script src="/js/panelToggle.js"></script>
</body>

</html>